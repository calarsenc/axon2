// Code generated by "stringer -type=Paradigms"; DO NOT EDIT.

package armaze

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Approach-0]
	_ = x[ParadigmsN-1]
}

const _Paradigms_name = "ApproachParadigmsN"

var _Paradigms_index = [...]uint8{0, 8, 18}

func (i Paradigms) String() string {
	if i < 0 || i >= Paradigms(len(_Paradigms_index)-1) {
		return "Paradigms(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Paradigms_name[_Paradigms_index[i]:_Paradigms_index[i+1]]
}

func (i *Paradigms) FromString(s string) error {
	for j := 0; j < len(_Paradigms_index)-1; j++ {
		if s == _Paradigms_name[_Paradigms_index[j]:_Paradigms_index[j+1]] {
			*i = Paradigms(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Paradigms")
}

var _Paradigms_descMap = map[Paradigms]string{
	0: `Approach is a basic case where one Drive (chosen at random each trial) is fully active and others are at InactiveDrives levels -- goal is to approach the CS associated with the Drive-satisfying US, and avoid negative any negative USs. USs are always placed in same Arms (NArms must be &gt;= NUSs -- any additional Arms are filled at random with additional US copies)`,
	1: ``,
}

func (i Paradigms) Desc() string {
	if str, ok := _Paradigms_descMap[i]; ok {
		return str
	}
	return "Paradigms(" + strconv.FormatInt(int64(i), 10) + ")"
}
