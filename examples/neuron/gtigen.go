// Code generated by "goki generate -add-types"; DO NOT EDIT.

package main

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:       "main.ParamConfig",
	ShortName:  "main.ParamConfig",
	IDName:     "param-config",
	Doc:        "ParamConfig has config parameters related to sim params",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Network", &gti.Field{Name: "Network", Type: "map[string]any", LocalType: "map[string]any", Doc: "network parameters", Directives: gti.Directives{}, Tag: ""}},
		{"Sheet", &gti.Field{Name: "Sheet", Type: "string", LocalType: "string", Doc: "Extra Param Sheet name(s) to use (space separated if multiple) -- must be valid name as listed in compiled-in params or loaded params", Directives: gti.Directives{}, Tag: ""}},
		{"Tag", &gti.Field{Name: "Tag", Type: "string", LocalType: "string", Doc: "extra tag to add to file names and logs saved from this run", Directives: gti.Directives{}, Tag: ""}},
		{"Note", &gti.Field{Name: "Note", Type: "string", LocalType: "string", Doc: "user note -- describe the run params etc -- like a git commit message for the run", Directives: gti.Directives{}, Tag: ""}},
		{"File", &gti.Field{Name: "File", Type: "string", LocalType: "string", Doc: "Name of the JSON file to input saved parameters from.", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
		{"SaveAll", &gti.Field{Name: "SaveAll", Type: "bool", LocalType: "bool", Doc: "Save a snapshot of all current param and config settings in a directory named params_<datestamp> (or _good if Good is true), then quit -- useful for comparing to later changes and seeing multiple views of current params", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
		{"Good", &gti.Field{Name: "Good", Type: "bool", LocalType: "bool", Doc: "for SaveAll, save to params_good for a known good params state.  This can be done prior to making a new release after all tests are passing -- add results to git to provide a full diff record of all params over time.", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.RunConfig",
	ShortName:  "main.RunConfig",
	IDName:     "run-config",
	Doc:        "RunConfig has config parameters related to running the sim",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"GPU", &gti.Field{Name: "GPU", Type: "bool", LocalType: "bool", Doc: "use the GPU for computation -- only for testing in this model -- not faster", Directives: gti.Directives{}, Tag: "def:\"false\""}},
		{"NThreads", &gti.Field{Name: "NThreads", Type: "int", LocalType: "int", Doc: "number of parallel threads for CPU computation -- 0 = use default", Directives: gti.Directives{}, Tag: "def:\"2\""}},
		{"Run", &gti.Field{Name: "Run", Type: "int", LocalType: "int", Doc: "starting run number -- determines the random seed -- runs counts from there -- can do all runs in parallel by launching separate jobs with each run, runs = 1", Directives: gti.Directives{}, Tag: "def:\"0\""}},
		{"NRuns", &gti.Field{Name: "NRuns", Type: "int", LocalType: "int", Doc: "total number of runs to do when running Train", Directives: gti.Directives{}, Tag: "def:\"1\" min:\"1\""}},
		{"NEpochs", &gti.Field{Name: "NEpochs", Type: "int", LocalType: "int", Doc: "total number of epochs per run", Directives: gti.Directives{}, Tag: "def:\"1\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.LogConfig",
	ShortName:  "main.LogConfig",
	IDName:     "log-config",
	Doc:        "LogConfig has config parameters related to logging data",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"SaveWts", &gti.Field{Name: "SaveWts", Type: "bool", LocalType: "bool", Doc: "if true, save final weights after each run", Directives: gti.Directives{}, Tag: ""}},
		{"Cycle", &gti.Field{Name: "Cycle", Type: "bool", LocalType: "bool", Doc: "if true, save cycle log to file, as .cyc.tsv typically", Directives: gti.Directives{}, Tag: "def:\"true\" nest:\"+\""}},
		{"NetData", &gti.Field{Name: "NetData", Type: "bool", LocalType: "bool", Doc: "if true, save network activation etc data from testing trials, for later viewing in netview", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.Config",
	ShortName:  "main.Config",
	IDName:     "config",
	Doc:        "Config is a standard Sim config -- use as a starting point.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"GeClamp", &gti.Field{Name: "GeClamp", Type: "bool", LocalType: "bool", Doc: "clamp constant Ge value -- otherwise drive discrete spiking input", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"SpikeHz", &gti.Field{Name: "SpikeHz", Type: "float32", LocalType: "float32", Doc: "frequency of input spiking for !GeClamp mode", Directives: gti.Directives{}, Tag: "def:\"50\""}},
		{"Ge", &gti.Field{Name: "Ge", Type: "float32", LocalType: "float32", Doc: "Raw synaptic excitatory conductance", Directives: gti.Directives{}, Tag: "min:\"0\" step:\"0.01\" def:\"0.1\""}},
		{"Gi", &gti.Field{Name: "Gi", Type: "float32", LocalType: "float32", Doc: "Inhibitory conductance", Directives: gti.Directives{}, Tag: "min:\"0\" step:\"0.01\" def:\"0.1\""}},
		{"ErevE", &gti.Field{Name: "ErevE", Type: "float32", LocalType: "float32", Doc: "excitatory reversal (driving) potential -- determines where excitation pushes Vm up to", Directives: gti.Directives{}, Tag: "min:\"0\" max:\"1\" step:\"0.01\" def:\"1\""}},
		{"ErevI", &gti.Field{Name: "ErevI", Type: "float32", LocalType: "float32", Doc: "leak reversal (driving) potential -- determines where excitation pulls Vm down to", Directives: gti.Directives{}, Tag: "min:\"0\" max:\"1\" step:\"0.01\" def:\"0.3\""}},
		{"Noise", &gti.Field{Name: "Noise", Type: "float32", LocalType: "float32", Doc: "the variance parameter for Gaussian noise added to unit activations on every cycle", Directives: gti.Directives{}, Tag: "min:\"0\" step:\"0.01\""}},
		{"KNaAdapt", &gti.Field{Name: "KNaAdapt", Type: "bool", LocalType: "bool", Doc: "apply sodium-gated potassium adaptation mechanisms that cause the neuron to reduce spiking over time", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"MahpGbar", &gti.Field{Name: "MahpGbar", Type: "float32", LocalType: "float32", Doc: "strength of mAHP M-type channel -- used to be implemented by KNa but now using the more standard M-type channel mechanism", Directives: gti.Directives{}, Tag: "def:\"0.05\""}},
		{"NMDAGbar", &gti.Field{Name: "NMDAGbar", Type: "float32", LocalType: "float32", Doc: "strength of NMDA current -- 0.006 default for posterior cortex", Directives: gti.Directives{}, Tag: "def:\"0.006\""}},
		{"GABABGbar", &gti.Field{Name: "GABABGbar", Type: "float32", LocalType: "float32", Doc: "strength of GABAB current -- 0.015 default for posterior cortex", Directives: gti.Directives{}, Tag: "def:\"0.015\""}},
		{"VGCCGbar", &gti.Field{Name: "VGCCGbar", Type: "float32", LocalType: "float32", Doc: "strength of VGCC voltage gated calcium current -- only activated during spikes -- this is now an essential part of Ca-driven learning to reflect recv spiking in the Ca signal -- but if too strong leads to runaway excitatory bursting.", Directives: gti.Directives{}, Tag: "def:\"0.02\""}},
		{"AKGbar", &gti.Field{Name: "AKGbar", Type: "float32", LocalType: "float32", Doc: "strength of A-type potassium channel -- this is only active at high (depolarized) membrane potentials -- only during spikes -- useful to counteract VGCC's", Directives: gti.Directives{}, Tag: "def:\"0.1\""}},
		{"NCycles", &gti.Field{Name: "NCycles", Type: "int", LocalType: "int", Doc: "total number of cycles to run", Directives: gti.Directives{}, Tag: "min:\"10\" def:\"200\""}},
		{"OnCycle", &gti.Field{Name: "OnCycle", Type: "int", LocalType: "int", Doc: "when does excitatory input into neuron come on?", Directives: gti.Directives{}, Tag: "min:\"0\" def:\"10\""}},
		{"OffCycle", &gti.Field{Name: "OffCycle", Type: "int", LocalType: "int", Doc: "when does excitatory input into neuron go off?", Directives: gti.Directives{}, Tag: "min:\"0\" def:\"160\""}},
		{"UpdtInterval", &gti.Field{Name: "UpdtInterval", Type: "int", LocalType: "int", Doc: "how often to update display (in cycles)", Directives: gti.Directives{}, Tag: "min:\"1\" def:\"10\" "}},
		{"Includes", &gti.Field{Name: "Includes", Type: "[]string", LocalType: "[]string", Doc: "specify include files here, and after configuration, it contains list of include files added", Directives: gti.Directives{}, Tag: ""}},
		{"GUI", &gti.Field{Name: "GUI", Type: "bool", LocalType: "bool", Doc: "open the GUI -- does not automatically run -- if false, then runs automatically and quits", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"Debug", &gti.Field{Name: "Debug", Type: "bool", LocalType: "bool", Doc: "log debugging information", Directives: gti.Directives{}, Tag: ""}},
		{"Params", &gti.Field{Name: "Params", Type: "github.com/emer/axon/v2/examples/neuron.ParamConfig", LocalType: "ParamConfig", Doc: "parameter related configuration options", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"Run", &gti.Field{Name: "Run", Type: "github.com/emer/axon/v2/examples/neuron.RunConfig", LocalType: "RunConfig", Doc: "sim running related configuration options", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"Log", &gti.Field{Name: "Log", Type: "github.com/emer/axon/v2/examples/neuron.LogConfig", LocalType: "LogConfig", Doc: "data logging related configuration options", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.NeuronEx",
	ShortName:  "main.NeuronEx",
	IDName:     "neuron-ex",
	Doc:        "Extra state for neuron",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"InISI", &gti.Field{Name: "InISI", Type: "float32", LocalType: "float32", Doc: "input ISI countdown for spiking mode -- counts up", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.Sim",
	ShortName:  "main.Sim",
	IDName:     "sim",
	Doc:        "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Config", &gti.Field{Name: "Config", Type: "github.com/emer/axon/v2/examples/neuron.Config", LocalType: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args", Directives: gti.Directives{}, Tag: ""}},
		{"Net", &gti.Field{Name: "Net", Type: "*github.com/emer/axon/axon.Network", LocalType: "*axon.Network", Doc: "the network -- click to view / edit parameters for layers, prjns, etc", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
		{"NeuronEx", &gti.Field{Name: "NeuronEx", Type: "github.com/emer/axon/v2/examples/neuron.NeuronEx", LocalType: "NeuronEx", Doc: "extra neuron state for additional channels: VGCC, AK", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
		{"Context", &gti.Field{Name: "Context", Type: "github.com/emer/axon/v2/axon.Context", LocalType: "axon.Context", Doc: "axon timing parameters and state", Directives: gti.Directives{}, Tag: ""}},
		{"Stats", &gti.Field{Name: "Stats", Type: "github.com/emer/emergent/v2/estats.Stats", LocalType: "estats.Stats", Doc: "contains computed statistic values", Directives: gti.Directives{}, Tag: ""}},
		{"Logs", &gti.Field{Name: "Logs", Type: "github.com/emer/emergent/v2/elog.Logs", LocalType: "elog.Logs", Doc: "logging", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
		{"Params", &gti.Field{Name: "Params", Type: "github.com/emer/emergent/v2/emer.NetParams", LocalType: "emer.NetParams", Doc: "all parameter management", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Cycle", &gti.Field{Name: "Cycle", Type: "int", LocalType: "int", Doc: "current cycle of updating", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ViewUpdt", &gti.Field{Name: "ViewUpdt", Type: "github.com/emer/emergent/v2/netview.ViewUpdt", LocalType: "netview.ViewUpdt", Doc: "netview update parameters", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"GUI", &gti.Field{Name: "GUI", Type: "github.com/emer/emergent/v2/egui.GUI", LocalType: "egui.GUI", Doc: "manages all the gui elements", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"TstCycPlot", &gti.Field{Name: "TstCycPlot", Type: "*goki.dev/etable/v2/eplot.Plot2D", LocalType: "*eplot.Plot2D", Doc: "the test-trial plot", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"ValMap", &gti.Field{Name: "ValMap", Type: "map[string]float32", LocalType: "map[string]float32", Doc: "map of values for detailed debugging / testing", Directives: gti.Directives{}, Tag: "view:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})
