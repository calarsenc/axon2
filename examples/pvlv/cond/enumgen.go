// Code generated by "goki generate -add-types"; DO NOT EDIT.

package cond

import (
	"errors"
	"log"
	"strconv"
	"strings"

	"goki.dev/enums"
)

var _ValenceValues = []Valence{0, 1}

// ValenceN is the highest valid value
// for type Valence, plus one.
const ValenceN Valence = 2

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the enumgen command to generate them again.
func _ValenceNoOp() {
	var x [1]struct{}
	_ = x[Pos-(0)]
	_ = x[Neg-(1)]
}

var _ValenceNameToValueMap = map[string]Valence{
	`Pos`: 0,
	`pos`: 0,
	`Neg`: 1,
	`neg`: 1,
}

var _ValenceDescMap = map[Valence]string{
	0: ``,
	1: ``,
}

var _ValenceMap = map[Valence]string{
	0: `Pos`,
	1: `Neg`,
}

// String returns the string representation
// of this Valence value.
func (i Valence) String() string {
	if str, ok := _ValenceMap[i]; ok {
		return str
	}
	return strconv.FormatInt(int64(i), 10)
}

// SetString sets the Valence value from its
// string representation, and returns an
// error if the string is invalid.
func (i *Valence) SetString(s string) error {
	if val, ok := _ValenceNameToValueMap[s]; ok {
		*i = val
		return nil
	}
	if val, ok := _ValenceNameToValueMap[strings.ToLower(s)]; ok {
		*i = val
		return nil
	}
	return errors.New(s + " is not a valid value for type Valence")
}

// Int64 returns the Valence value as an int64.
func (i Valence) Int64() int64 {
	return int64(i)
}

// SetInt64 sets the Valence value from an int64.
func (i *Valence) SetInt64(in int64) {
	*i = Valence(in)
}

// Desc returns the description of the Valence value.
func (i Valence) Desc() string {
	if str, ok := _ValenceDescMap[i]; ok {
		return str
	}
	return i.String()
}

// ValenceValues returns all possible values
// for the type Valence.
func ValenceValues() []Valence {
	return _ValenceValues
}

// Values returns all possible values
// for the type Valence.
func (i Valence) Values() []enums.Enum {
	res := make([]enums.Enum, len(_ValenceValues))
	for i, d := range _ValenceValues {
		res[i] = d
	}
	return res
}

// IsValid returns whether the value is a
// valid option for type Valence.
func (i Valence) IsValid() bool {
	_, ok := _ValenceMap[i]
	return ok
}

// MarshalText implements the [encoding.TextMarshaler] interface.
func (i Valence) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the [encoding.TextUnmarshaler] interface.
func (i *Valence) UnmarshalText(text []byte) error {
	if err := i.SetString(string(text)); err != nil {
		log.Println(err)
	}
	return nil
}
