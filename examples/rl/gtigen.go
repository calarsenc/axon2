// Code generated by "goki generate ./..."; DO NOT EDIT.

package main

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:       "main.OnOff",
	ShortName:  "main.OnOff",
	IDName:     "on-off",
	Doc:        "OnOff represents stimulus On / Off timing",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Act", &gti.Field{Name: "Act", Type: "bool", LocalType: "bool", Doc: "is this stimulus active -- use it?", Directives: gti.Directives{}, Tag: ""}},
		{"On", &gti.Field{Name: "On", Type: "int", LocalType: "int", Doc: "when stimulus turns on", Directives: gti.Directives{}, Tag: ""}},
		{"Off", &gti.Field{Name: "Off", Type: "int", LocalType: "int", Doc: "when stimulu turns off", Directives: gti.Directives{}, Tag: ""}},
		{"P", &gti.Field{Name: "P", Type: "float32", LocalType: "float32", Doc: "probability of being active on any given trial", Directives: gti.Directives{}, Tag: ""}},
		{"OnVar", &gti.Field{Name: "OnVar", Type: "int", LocalType: "int", Doc: "variability in onset timing (max number of trials before/after On that it could start)", Directives: gti.Directives{}, Tag: ""}},
		{"OffVar", &gti.Field{Name: "OffVar", Type: "int", LocalType: "int", Doc: "variability in offset timing (max number of trials before/after Off that it could end)", Directives: gti.Directives{}, Tag: ""}},
		{"CurAct", &gti.Field{Name: "CurAct", Type: "bool", LocalType: "bool", Doc: "current active status based on P probability", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"CurOn", &gti.Field{Name: "CurOn", Type: "int", LocalType: "int", Doc: "current on / off values using Var variability", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"CurOff", &gti.Field{Name: "CurOff", Type: "int", LocalType: "int", Doc: "current on / off values using Var variability", Directives: gti.Directives{}, Tag: "view:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.CondEnv",
	ShortName:  "main.CondEnv",
	IDName:     "cond-env",
	Doc:        "CondEnv simulates an n-armed bandit, where each of n inputs is associated with\na specific probability of reward.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Nm", &gti.Field{Name: "Nm", Type: "string", LocalType: "string", Doc: "name of this environment", Directives: gti.Directives{}, Tag: ""}},
		{"Dsc", &gti.Field{Name: "Dsc", Type: "string", LocalType: "string", Doc: "description of this environment", Directives: gti.Directives{}, Tag: ""}},
		{"TotTime", &gti.Field{Name: "TotTime", Type: "int", LocalType: "int", Doc: "total time for trial", Directives: gti.Directives{}, Tag: ""}},
		{"CSA", &gti.Field{Name: "CSA", Type: "github.com/emer/axon/examples/rl.OnOff", LocalType: "OnOff", Doc: "Conditioned stimulus A (e.g., Tone)", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"CSB", &gti.Field{Name: "CSB", Type: "github.com/emer/axon/examples/rl.OnOff", LocalType: "OnOff", Doc: "Conditioned stimulus B (e.g., Light)", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"CSC", &gti.Field{Name: "CSC", Type: "github.com/emer/axon/examples/rl.OnOff", LocalType: "OnOff", Doc: "Conditioned stimulus C", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"US", &gti.Field{Name: "US", Type: "github.com/emer/axon/examples/rl.OnOff", LocalType: "OnOff", Doc: "Unconditioned stimulus -- reward", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"RewVal", &gti.Field{Name: "RewVal", Type: "float32", LocalType: "float32", Doc: "value for reward", Directives: gti.Directives{}, Tag: ""}},
		{"NoRewVal", &gti.Field{Name: "NoRewVal", Type: "float32", LocalType: "float32", Doc: "value for non-reward", Directives: gti.Directives{}, Tag: ""}},
		{"Input", &gti.Field{Name: "Input", Type: "github.com/emer/etable/v2/etensor.Float64", LocalType: "etensor.Float64", Doc: "one-hot input representation of current option", Directives: gti.Directives{}, Tag: ""}},
		{"Reward", &gti.Field{Name: "Reward", Type: "github.com/emer/etable/v2/etensor.Float64", LocalType: "etensor.Float64", Doc: "single reward value", Directives: gti.Directives{}, Tag: ""}},
		{"HasRew", &gti.Field{Name: "HasRew", Type: "bool", LocalType: "bool", Doc: "true if a US reward value was set", Directives: gti.Directives{}, Tag: ""}},
		{"Run", &gti.Field{Name: "Run", Type: "github.com/emer/emergent/v2/env.Ctr", LocalType: "env.Ctr", Doc: "current run of model as provided during Init", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Epoch", &gti.Field{Name: "Epoch", Type: "github.com/emer/emergent/v2/env.Ctr", LocalType: "env.Ctr", Doc: "number of times through Seq.Max number of sequences", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Trial", &gti.Field{Name: "Trial", Type: "github.com/emer/emergent/v2/env.Ctr", LocalType: "env.Ctr", Doc: "one trial is a pass through all TotTime Events", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Event", &gti.Field{Name: "Event", Type: "github.com/emer/emergent/v2/env.Ctr", LocalType: "env.Ctr", Doc: "event is one time step within Trial -- e.g., CS turning on, etc", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.EnvConfig",
	ShortName:  "main.EnvConfig",
	IDName:     "env-config",
	Doc:        "EnvConfig has config params for environment\nnote: only adding fields for key Env params that matter for both Network and Env\nother params are set via the Env map data mechanism.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Env", &gti.Field{Name: "Env", Type: "map[string]any", LocalType: "map[string]any", Doc: "env parameters -- can set any field/subfield on Env struct, using standard TOML formatting", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.ParamConfig",
	ShortName:  "main.ParamConfig",
	IDName:     "param-config",
	Doc:        "ParamConfig has config parameters related to sim params",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Network", &gti.Field{Name: "Network", Type: "map[string]any", LocalType: "map[string]any", Doc: "network parameters", Directives: gti.Directives{}, Tag: ""}},
		{"Sheet", &gti.Field{Name: "Sheet", Type: "string", LocalType: "string", Doc: "Extra Param Sheet name(s) to use (space separated if multiple) -- must be valid name as listed in compiled-in params or loaded params", Directives: gti.Directives{}, Tag: ""}},
		{"Tag", &gti.Field{Name: "Tag", Type: "string", LocalType: "string", Doc: "extra tag to add to file names and logs saved from this run", Directives: gti.Directives{}, Tag: ""}},
		{"Note", &gti.Field{Name: "Note", Type: "string", LocalType: "string", Doc: "user note -- describe the run params etc -- like a git commit message for the run", Directives: gti.Directives{}, Tag: ""}},
		{"File", &gti.Field{Name: "File", Type: "string", LocalType: "string", Doc: "Name of the JSON file to input saved parameters from.", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
		{"SaveAll", &gti.Field{Name: "SaveAll", Type: "bool", LocalType: "bool", Doc: "Save a snapshot of all current param and config settings in a directory named params_<datestamp> (or _good if Good is true), then quit -- useful for comparing to later changes and seeing multiple views of current params", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
		{"Good", &gti.Field{Name: "Good", Type: "bool", LocalType: "bool", Doc: "for SaveAll, save to params_good for a known good params state.  This can be done prior to making a new release after all tests are passing -- add results to git to provide a full diff record of all params over time.", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.RunConfig",
	ShortName:  "main.RunConfig",
	IDName:     "run-config",
	Doc:        "RunConfig has config parameters related to running the sim",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"GPU", &gti.Field{Name: "GPU", Type: "bool", LocalType: "bool", Doc: "use the GPU for computation -- only for testing in this model -- not faster", Directives: gti.Directives{}, Tag: "def:\"false\""}},
		{"NThreads", &gti.Field{Name: "NThreads", Type: "int", LocalType: "int", Doc: "number of parallel threads for CPU computation -- 0 = use default", Directives: gti.Directives{}, Tag: "def:\"2\""}},
		{"Run", &gti.Field{Name: "Run", Type: "int", LocalType: "int", Doc: "starting run number -- determines the random seed -- runs counts from there -- can do all runs in parallel by launching separate jobs with each run, runs = 1", Directives: gti.Directives{}, Tag: "def:\"0\""}},
		{"NRuns", &gti.Field{Name: "NRuns", Type: "int", LocalType: "int", Doc: "total number of runs to do when running Train", Directives: gti.Directives{}, Tag: "def:\"1\" min:\"1\""}},
		{"NEpochs", &gti.Field{Name: "NEpochs", Type: "int", LocalType: "int", Doc: "total number of epochs per run", Directives: gti.Directives{}, Tag: "def:\"100\""}},
		{"NTrials", &gti.Field{Name: "NTrials", Type: "int", LocalType: "int", Doc: "total number of trials per epoch -- should be number of ticks in env.", Directives: gti.Directives{}, Tag: "def:\"20\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.LogConfig",
	ShortName:  "main.LogConfig",
	IDName:     "log-config",
	Doc:        "LogConfig has config parameters related to logging data",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"AggStats", &gti.Field{Name: "AggStats", Type: "[]string", LocalType: "[]string", Doc: "] stats to aggregate at higher levels", Directives: gti.Directives{}, Tag: "def:\"['DA','VSPatch']\""}},
		{"SaveWts", &gti.Field{Name: "SaveWts", Type: "bool", LocalType: "bool", Doc: "if true, save final weights after each run", Directives: gti.Directives{}, Tag: ""}},
		{"Epoch", &gti.Field{Name: "Epoch", Type: "bool", LocalType: "bool", Doc: "if true, save train epoch log to file, as .epc.tsv typically", Directives: gti.Directives{}, Tag: "def:\"true\" nest:\"+\""}},
		{"Run", &gti.Field{Name: "Run", Type: "bool", LocalType: "bool", Doc: "if true, save run log to file, as .run.tsv typically", Directives: gti.Directives{}, Tag: "def:\"true\" nest:\"+\""}},
		{"Trial", &gti.Field{Name: "Trial", Type: "bool", LocalType: "bool", Doc: "if true, save train trial log to file, as .trl.tsv typically. May be large.", Directives: gti.Directives{}, Tag: "def:\"false\" nest:\"+\""}},
		{"NetData", &gti.Field{Name: "NetData", Type: "bool", LocalType: "bool", Doc: "if true, save network activation etc data from testing trials, for later viewing in netview", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.Config",
	ShortName:  "main.Config",
	IDName:     "config",
	Doc:        "Config is a standard Sim config -- use as a starting point.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Includes", &gti.Field{Name: "Includes", Type: "[]string", LocalType: "[]string", Doc: "specify include files here, and after configuration, it contains list of include files added", Directives: gti.Directives{}, Tag: ""}},
		{"RW", &gti.Field{Name: "RW", Type: "bool", LocalType: "bool", Doc: "if true, use Rescorla-Wagner -- set in code or rebuild network", Directives: gti.Directives{}, Tag: ""}},
		{"GUI", &gti.Field{Name: "GUI", Type: "bool", LocalType: "bool", Doc: "open the GUI -- does not automatically run -- if false, then runs automatically and quits", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"Debug", &gti.Field{Name: "Debug", Type: "bool", LocalType: "bool", Doc: "log debugging information", Directives: gti.Directives{}, Tag: ""}},
		{"Env", &gti.Field{Name: "Env", Type: "github.com/emer/axon/examples/rl.EnvConfig", LocalType: "EnvConfig", Doc: "environment configuration options", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"Params", &gti.Field{Name: "Params", Type: "github.com/emer/axon/examples/rl.ParamConfig", LocalType: "ParamConfig", Doc: "parameter related configuration options", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"Run", &gti.Field{Name: "Run", Type: "github.com/emer/axon/examples/rl.RunConfig", LocalType: "RunConfig", Doc: "sim running related configuration options", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"Log", &gti.Field{Name: "Log", Type: "github.com/emer/axon/examples/rl.LogConfig", LocalType: "LogConfig", Doc: "data logging related configuration options", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "main.Sim",
	ShortName:  "main.Sim",
	IDName:     "sim",
	Doc:        "Sim encapsulates the entire simulation model, and we define all the\nfunctionality as methods on this struct.  This structure keeps all relevant\nstate information organized and available without having to pass everything around\nas arguments to methods, and provides the core GUI interface (note the view tags\nfor the fields which provide hints to how things should be displayed).",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Config", &gti.Field{Name: "Config", Type: "github.com/emer/axon/examples/rl.Config", LocalType: "Config", Doc: "simulation configuration parameters -- set by .toml config file and / or args", Directives: gti.Directives{}, Tag: ""}},
		{"Net", &gti.Field{Name: "Net", Type: "*invalid type", LocalType: "*axon.Network", Doc: "the network -- click to view / edit parameters for layers, prjns, etc", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
		{"Params", &gti.Field{Name: "Params", Type: "github.com/emer/emergent/v2/emer.NetParams", LocalType: "emer.NetParams", Doc: "all parameter management", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Loops", &gti.Field{Name: "Loops", Type: "*github.com/emer/emergent/v2/looper.Manager", LocalType: "*looper.Manager", Doc: "contains looper control loops for running sim", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
		{"Stats", &gti.Field{Name: "Stats", Type: "github.com/emer/emergent/v2/estats.Stats", LocalType: "estats.Stats", Doc: "contains computed statistic values", Directives: gti.Directives{}, Tag: ""}},
		{"Logs", &gti.Field{Name: "Logs", Type: "github.com/emer/emergent/v2/elog.Logs", LocalType: "elog.Logs", Doc: "Contains all the logs and information about the logs.'", Directives: gti.Directives{}, Tag: ""}},
		{"Envs", &gti.Field{Name: "Envs", Type: "github.com/emer/emergent/v2/env.Envs", LocalType: "env.Envs", Doc: "Environments", Directives: gti.Directives{}, Tag: "view:\"no-inline\""}},
		{"Context", &gti.Field{Name: "Context", Type: "invalid type", LocalType: "axon.Context", Doc: "axon timing parameters and state", Directives: gti.Directives{}, Tag: ""}},
		{"ViewUpdt", &gti.Field{Name: "ViewUpdt", Type: "github.com/emer/emergent/v2/netview.ViewUpdt", LocalType: "netview.ViewUpdt", Doc: "netview update parameters", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"GUI", &gti.Field{Name: "GUI", Type: "github.com/emer/emergent/v2/egui.GUI", LocalType: "egui.GUI", Doc: "manages all the gui elements", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RndSeeds", &gti.Field{Name: "RndSeeds", Type: "github.com/emer/emergent/v2/erand.Seeds", LocalType: "erand.Seeds", Doc: "a list of random seeds to use for each run", Directives: gti.Directives{}, Tag: "view:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})
