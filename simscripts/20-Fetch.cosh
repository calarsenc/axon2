
// FetchJob downloads results files from server.
// if force == true then will re-get already-Fetched jobs,
// otherwise these are skipped.
func FetchJob(jid string, force bool) {
	spath := ServerJobPath(jid)
	jpath := JobPath(jid)
	@1
	cd
	@0
	cd {jpath}
	sstat := shell.ReadFile("job.status")
	if !force && sstat == "Fetched" {
		return
	}
	@1	cd {spath}
	@0
	ffiles := `@1 /bin/ls -1 {Config.FetchFiles}`
	if len(ffiles) > 0 {
		core.MessageSnackbar(br, fmt.Sprintf("Fetching %d data files for job: %s", len(ffiles), jid))
	}
	for _, ff := range shell.SplitLines(ffiles) {
		// fmt.Println(ff)
		rfn := "@1:" + ff
		scp {rfn} {ff}
		if sstat == "Finalized" && strings.HasSuffix(ff, ".tsv") {
			if strings.Contains(ff, "_epc.tsv") {
				databrowser.CleanCatTSV(ff, []string{"Run", "Epoch"})
				idx := strings.Index(ff, "_epc.tsv")
				tablecat -colavg -col Epoch -o {ff[:idx+1]+"avg"+ff[idx+1:]} {ff}
			} else if strings.Contains(ff, "_run.tsv") {
				databrowser.CleanCatTSV(ff, []string{"Run"})
				idx := strings.Index(ff, "_run.tsv")
				tablecat -colavg -o {ff[:idx+1]+"avg"+ff[idx+1:]} {ff}
			} else {
				databrowser.CleanCatTSV(ff, []string{"Run"})
			}
		}
	}
	@0
	if sstat == "Finalized" {
		// fmt.Println("status finalized")
		shell.WriteFile("job.status", "Fetched")
		shell.ReplaceInFile("dbmeta.toml", "\"Finalized\"", "\"Fetched\"")
		
	} else {
		fmt.Println("status:", sstat)
	}
}

func FetchJobs(path string) {
	@0
	tv := JobsTableView
	jobs := tv.SelectedColumnStrings("JobID")
	if len(jobs) == 0 {
		dpath := filepath.Join(br.DataRoot, path)
		jobs = dirs.Dirs(dpath)
	}
	for _, jid := range jobs {
		FetchJob(jid, true)
	}
	core.MessageSnackbar(br, "Fetch Jobs completed")
	Update()
}

{go FetchJobs(Config.Version)}

