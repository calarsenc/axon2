// to run, in numbers:
// databrowser.NewBrowserWindow("simdata")

// note: put all global stuff here so it is loaded once at start
// do not need import or package (those just require separate compiling
// because they put the interpreter in a "declaration" mode)

// Result has info for one loaded result, in form of an etable.Table
type Result struct {

	// job id for results
	JobID string

	// description of job
	Message string

	// args used in running job
	Args string

	// path to data
	Path string

	// result data
	Table *table.Table
}

// FilterResults specifies which results files to open
type FilterResults struct {
	// File name contains this string
	FileContains string `width:"60"`

	//	extension of files, e.g., .tsv
	Ext string
}

// SubmitParams specifies the parameters for submitting a job
type SubmitParams struct {
	// Message describing the simulation
	Message string `width:"100"`

	//	arguments to pass on the command line
	Args string
}

var (
	User             = "oreilly"
	UserShort        = User[:3]
	Project          = "objrec" // executable, project directory
	NRuns            = 10 // number of runs -- array args
	Version          = "v008"
	FetchFiles       = "*.tsv" // glob expression for files to fetch from server
	ExtraFiles       = []string{} // upload with job submit
	ServerName       = "hpc2"
	ServerRoot       = filepath.Join("simdata", Project, User)
	JobsTableView    *tensorview.TableView
	JobsTable        *table.Table
	ResultsTableView *views.TableView
	TimeFormat       = "2006-01-02 15:04:05 MST"

	PlotParams plotview.PlotParams // Default Plot settings
	Results    []*Result
	Filter     FilterResults
	Submit     SubmitParams
	UpdateFunc func() // function that is run after any action (e.g., Jobs) -- register when run
)


func JobPath(jid string) string {
	return filepath.Join(br.DataRoot, Version, jid)
}

func ServerJobPath(jid string) string {
	return filepath.Join(ServerRoot, Version, jid)
}

// Call update after each action that affects jobs.
// UpdateFunc is registered in Jobs
func Update() {
	if UpdateFunc != nil {
		UpdateFunc()
	}
}

func JobRow(jid string) int {
	ixs := JobsTable.RowsByString("JobID", jid, table.Equals, table.UseCase)
	if len(ixs) != 1 {
		fmt.Println("JobRow ERROR: job id:", jid, "not found")
		return -1
	}
	return ixs[0]
}

// ValueForJob returns value in given column for given job id
func ValueForJob(jid, column string) string {
	if jrow := JobRow(jid); jrow >= 0 {
		return JobsTable.StringValue(column, jrow)
	}
	return ""
}

// primary remote server: avail as @1
cossh hpc2.engr.ucdavis.edu

func defaults() {
	PlotParams.Defaults()
	PlotParams.Title = Project + " " + Version + " Data"
	PlotParams.XAxisColumn = "Run"
	PlotParams.LegendColumn = "JobID"
}

defaults()

