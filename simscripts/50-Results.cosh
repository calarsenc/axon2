// Results loads specific .tsv data files from the jobs selected
// in the Jobs table, into the Results table.  There are often
// multiple result files per job, so this step is necessary to
// choose which such files to select for plotting.

func OpenResultFiles(jobs []string, filter FilterResults) {
	for i, jid := range jobs {
		jpath := JobPath(jid)
		message := ValueForJob(jid, "Message")
		label := ValueForJob(jid, "Label")
		args := ValueForJob(jid, "Args")
		fls := fsx.Filenames(jpath, filter.Ext)
		ifls := []string{}
		for _, fn := range fls {
			if filter.FileContains != "" && !strings.Contains(fn, filter.FileContains) {
				continue
			}
			dt := table.NewTable()
			fpath := filepath.Join(jpath, fn)
			err := dt.OpenCSV(core.Filename(fpath), table.Tab)
			if err != nil {
				fmt.Println(err.Error())
			}
			rpath := strings.TrimPrefix(fpath, br.DataRoot)
			Results = append(Results, &Result{JobID: jid, Label: label, Message: message, Args: args, Path: rpath, Table: dt})
		}
	}
	if len(Results) == 0 {
		core.MessageSnackbar(br, "No files containing: " + filter.FileContains + " with extension: " + filter.Ext)
		return
	}
	ResultsTableView = br.NewTabTable("Results", &Results)
	br.Update()
}

func OpenResults() {
	tv := JobsTableView
	jobs := tv.SelectedColumnStrings("JobID")
	if len(jobs) == 0 {
		fmt.Println("No Jobs rows selected")
		return
	}
	// fmt.Println(jobs)
	if Config.Filter.Ext == "" {
		Config.Filter.Ext = ".tsv"
	}
	databrowser.PromptStruct(br, &Config.Filter, "Open results data for files", func() {
		OpenResultFiles(jobs, Config.Filter)
	})
}

OpenResults()

