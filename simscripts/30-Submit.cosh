// This submit script handles the SLURM array job case, with an outer
// startup job that calls the main array jobs and a final cleanup job.

// WriteSBatchHeader writes the header of a SLURM SBatch script
// that is common across all three scripts.
// IMPORTANT: set the job parameters here!
func WriteSBatchHeader(w io.Writer, jid string) {
	fmt.Fprintf(w, "#SBATCH --job-name=%s_%s\n", Config.Project, jid)
	fmt.Fprintf(w, "#SBATCH --mem-per-cpu=%dG\n", Config.Job.Memory)
	fmt.Fprintf(w, "#SBATCH --time=%d:00:00\n", Config.Job.Hours)
	fmt.Fprintf(w, "#SBATCH --ntasks=%d\n", Config.Job.Tasks)
	fmt.Fprintf(w, "#SBATCH --cpus-per-task=%d\n", Config.Job.CPUsPerTask)
	fmt.Fprintf(w, "#SBATCH --ntasks-per-node=%d\n", Config.Job.TasksPerNode)
	if Config.ExcludeNodes != "" {
		fmt.Fprintf(w, "#SBATCH --exclude=%s\n", Config.ExcludeNodes)
	}
	// fmt.Fprint(w, "#SBATCH --nodelist=agate-[2,19]\n")
	// fmt.Fprintf(w, "#SBATCH --qos=%s\n", qos)
	// fmt.Fprintf(w, "#SBATCH --partition=%s\n", qosShort)
	fmt.Fprintf(w, "#SBATCH --mail-type=FAIL\n")
	fmt.Fprintf(w, "#SBATCH --mail-user=%s\n", Config.User)
	// these might be needed depending on environment in head node vs. compute nodes
	// fmt.Fprintf(w, "#SBATCH --export=NONE\n")
	// fmt.Fprintf(w, "unset SLURM_EXPORT_ENV\n")
}

func WriteSBatchSetup(w io.Writer, jid string) {
	fmt.Fprintf(w, "#!/bin/bash -l\n") //  -l = login session, sources your .bash_profile
	fmt.Fprint(w, "#SBATCH --output=job.setup.out\n")
	// fmt.Fprint(w, "#SBATCH --error=job.%A.setup.err")
	WriteSBatchHeader(w, jid)

	//////////////////////////////////////////////////////////
	// now we do all the setup, like building the executable
	
	fmt.Fprintf(w, "\n\n")
	// fmt.Fprintf(w, "go build -mod=mod -tags mpi\n")
	fmt.Fprintf(w, "go build -mod=mod\n")
	// fmt.Fprintf(w, "/bin/rm images\n")
	// fmt.Fprintf(w, "ln -s $HOME/ccn_images/CU3D100_20obj8inst_8tick4sac images\n")
	fmt.Fprintln(w, "date '+%Y-%m-%d %T %Z' > job.start")
}

func WriteSBatchArray(w io.Writer, jid, setup_id, args string) {
	fmt.Fprintf(w, "#!/bin/bash -l\n") //  -l = login session, sources your .bash_profile
	fmt.Fprintf(w, "#SBATCH --array=0-%d\n", Config.Job.NRuns-1)
	fmt.Fprint(w, "#SBATCH --output=job.%A_%a.out\n")
	// fmt.Fprint(w, "#SBATCH --error=job.%A_%a.err\n")
 	fmt.Fprintf(w, "#SBATCH --dependency=afterany:%s\n", setup_id)
	WriteSBatchHeader(w, jid)

	//////////////////////////////////////////////////////////
	// now we run the job
	
	fmt.Fprintf(w, "echo $SLURM_ARRAY_JOB_ID\n")
	fmt.Fprintf(w, "\n\n")
	// note: could use srun to run job; -nruns = 1 is number to run from run start
	fmt.Fprintf(w, "./%s -nogui -run $SLURM_ARRAY_TASK_ID -nruns 1 %s\n", Config.Project, args)
}

func WriteSBatchCleanup(w io.Writer, jid, array_id string) {
	fmt.Fprintf(w, "#!/bin/bash -l\n") //  -l = login session, sources your .bash_profile
	fmt.Fprint(w, "#SBATCH --output=job.cleanup.out\n")
	// fmt.Fprint(w, "#SBATCH --error=job.cleanup.err")
 	fmt.Fprintf(w, "#SBATCH --dependency=afterany:%s\n", array_id)
	WriteSBatchHeader(w, jid)
	fmt.Fprintf(w, "\n\n")

	//////////////////////////////////////////////////////////
	// now we cleanup after all the jobs have run
	//	can cat results files etc.

 	fmt.Fprintf(w, "cat job.*.out > job.out\n")
 	fmt.Fprintf(w, "/bin/rm job.*.out\n")

 	fmt.Fprintf(w, "cat *Base*run.tsv > all_run.tsv\n")
 	fmt.Fprintf(w, "/bin/rm *Base*run.tsv\n")

 	fmt.Fprintf(w, "cat *Base*epc.tsv > all_epc.tsv\n")
 	fmt.Fprintf(w, "/bin/rm *Base*epc.tsv\n")

	fmt.Fprintln(w, "date '+%Y-%m-%d %T %Z' > job.end")
}

func SubmitSBatch(jid, args string) string {
	@0
	f, _ := os.Create("job.setup.sbatch")
	WriteSBatchSetup(f, jid)
	f.Close()
	scp job.setup.sbatch @1:job.setup.sbatch
	sid := RunSBatch("job.setup.sbatch")

	f, _ = os.Create("job.sbatch")
	WriteSBatchArray(f, jid, sid, args)
	f.Close()
	scp job.sbatch @1:job.sbatch
	aid := RunSBatch("job.sbatch")
	
	f, _ = os.Create("job.cleanup.sbatch")
	WriteSBatchCleanup(f, jid, aid)
	f.Close()
	scp job.cleanup.sbatch @1:job.cleanup.sbatch
	cid := RunSBatch("job.cleanup.sbatch")

	return aid
}

// RunSBatch runs sbatch on the given sbatch file, 
// returning the resulting job id.
func RunSBatch(sbatch string) string {
	@1
	sbatch {sbatch} > job.slurm
	@0
	ss := `@1 cat job.slurm`
	if ss == "" {
		fmt.Println("JobStatus ERROR: no server job.slurm file to get server job id from")
		@1	cd
		@0
		return ""
	}
	ssf := strings.Fields(ss)
	sj := ssf[len(ssf)-1]
	return sj
}

// NextJobNumber returns the next sequential job number to use,
// incrementing value saved in last_job.number file
func NextJobNumber() int {
	jf := "last_job.number"
	jnf := shell.ReadFile(jf)
	jn := 0
	if jnf != "" {
		jn, _ = strconv.Atoi(strings.TrimSpace(jnf))
	}
	jn++
	shell.WriteFile(jf, strconv.Itoa(jn))
	return jn
}

func NextJobID() string {
	jn := NextJobNumber()
	jstr := fmt.Sprintf("%s%05d", Config.UserShort, jn)
	return jstr
}

// FindGoMod finds the go.mod file starting from the given directory
func FindGoMod(dir string) string {
	for {
		if shell.FileExists(filepath.Join(dir, "go.mod")) {
			return dir
		}
		dir = filepath.Dir(dir)
		if dir == "" {
			return ""
		}
	}
	return ""
}

func NewJob(message, args string) {
	os.Chdir(br.DataRoot)
	jid := NextJobID()
	spath := ServerJobPath(jid)
	jpath := JobPath(jid)
	core.MessageSnackbar(br, "Submitting Job: " + jid)
	// fmt.Println(jpath)
	os.MkdirAll(jpath, 0750)
	os.Chdir(jpath)
	shell.WriteFile("job.message", message)
	shell.WriteFile("job.args", args)
	shell.WriteFile("job.submit", time.Now().Format(Config.TimeFormat))
	shell.WriteFile("job.status", "Submitted")
	@1
	cd
	mkdir -p {spath}
	cd {spath}
	@0
	cd {jpath}

	fls := dirs.ExtFilenames(br.StartDir, ".go")
	// fmt.Println("uploading files:")
	for _, f := range fls {
		// fmt.Println(f)
		sfn := filepath.Join(br.StartDir, f)
		/bin/cp {sfn} {f}
		scp {sfn} {"@1:"+f}
	}
	for _, f := range Config.ExtraFiles {
		// fmt.Println(f)
		sfn := filepath.Join(br.StartDir, f)
		/bin/cp {sfn} {f}
		scp {sfn} {"@1:"+f}
	}
	for _, ed := range Config.ExtraDirs {
		@0
		jpathe := filepath.Join(jpath, ed)
		spathe := filepath.Join(spath, ed)
		loce := filepath.Join(br.StartDir, ed)
		mkdir -p {jpathe}
		cd {jpathe}
		@1
		cd
		mkdir -p {spathe}
		cd {spathe}
		@0
		efls := dirs.ExtFilenames(loce)
		for _, f := range efls {
			// fmt.Println("extra dir file:", f)
			sfn := filepath.Join(loce, f)
			/bin/cp {sfn} {f}
			scp {sfn} {"@1:"+f}
		}
	}
	for _, ed := range Config.CodeDirs {
		@0
		jpathe := filepath.Join(jpath, ed, "v2") // note: v2 required b/c axon/v2
		spathe := filepath.Join(spath, ed, "v2")
		loce := filepath.Join(br.StartDir, ed)
		mkdir -p {jpathe}
		cd {jpathe}
		@1
		cd
		mkdir -p {spathe}
		cd {spathe}
		@0
		efls := dirs.ExtFilenames(loce, ".go")
		for _, f := range efls {
			// fmt.Println(f)
			sfn := filepath.Join(loce, f)
			/bin/cp {sfn} {f}
			scp {sfn} {"@1:"+f}
		}
	}
	@1
	cd
	cd {spath}
	@0
	cd {jpath}
	
	core.MessageSnackbar(br, "Job: " + jid + " files copied, now updating go.mod (slow)")
	gomodDir := FindGoMod(br.StartDir)
	if gomodDir != "" {
		sfn := filepath.Join(gomodDir, "go.mod")
		// fmt.Println("go.mod dir:", gomodDir, sfn)
		scp {sfn} "@1:go.mod"
		sfn = filepath.Join(gomodDir, "go.sum")		
		scp {sfn} "@1:go.sum"
		@1
		go mod edit -module {Config.Project}
		for _, ed := range Config.CodeDirs {
			ed2 := ed+"/v2"
			cd {ed2}
			cp ../../go.mod .
			go mod edit -module {ed}
			go mod tidy
			@0
			scp "@1:go.mod" {ed2+"/go.mod"}
			scp "@1:go.sum" {ed2+"/go.sum"}
			@1
			cd ../../
		}
		for _, ed := range Config.CodeDirs {
			orig := "github.com/emer/axon/v2/examples/" + Config.Project + "/" + ed
			repl := "./" + ed
			go mod edit -replace {orig+"="+repl}
		}
		go mod tidy
		@0
		scp "@1:go.mod" "go.mod"
		scp "@1:go.sum" "go.sum"
	} else {
		fmt.Println("go.mod file not found!")
	}

	sid := SubmitSBatch(jid, args)
	
	shell.WriteFile("job.job", sid)
	fmt.Println("server job id:", sid)
	scp job.job @1:job.job
	core.MessageSnackbar(br, "Job: " + jid + " server job: " + sid + " successfully submitted")
	@1 cd
	@0
	Update()
}

func SubmitPrompt() {
	databrowser.PromptStruct(br, &Config.Submit, "Submit a new job", func() {
		{go NewJob(Config.Submit.Message, Config.Submit.Args)}
	})
}

SubmitPrompt()

