// Code generated by "goki generate -add-types"; DO NOT EDIT.

package axon

import (
	"goki.dev/gti"
	"goki.dev/ordmap"
)

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.SpikeParams",
	ShortName: "axon.SpikeParams",
	IDName:    "spike-params",
	Doc:       "SpikeParams contains spiking activation function params.\nImplements a basic thresholded Vm model, and optionally\nthe AdEx adaptive exponential function (adapt is KNaAdapt)",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"act"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"act"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"act"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Thr", &gti.Field{Name: "Thr", Type: "float32", LocalType: "float32", Doc: "threshold value Theta (Q) for firing output activation (.5 is more accurate value based on AdEx biological parameters and normalization", Directives: gti.Directives{}, Tag: "def:\"0.5\""}},
		{"VmR", &gti.Field{Name: "VmR", Type: "float32", LocalType: "float32", Doc: "post-spiking membrane potential to reset to, produces refractory effect if lower than VmInit -- 0.3 is apropriate biologically-based value for AdEx (Brette & Gurstner, 2005) parameters.  See also RTau", Directives: gti.Directives{}, Tag: "def:\"0.3\""}},
		{"Tr", &gti.Field{Name: "Tr", Type: "int32", LocalType: "int32", Doc: "post-spiking explicit refractory period, in cycles -- prevents Vm updating for this number of cycles post firing -- Vm is reduced in exponential steps over this period according to RTau, being fixed at Tr to VmR exactly", Directives: gti.Directives{}, Tag: "min:\"1\" def:\"3\""}},
		{"RTau", &gti.Field{Name: "RTau", Type: "float32", LocalType: "float32", Doc: "time constant for decaying Vm down to VmR -- at end of Tr it is set to VmR exactly -- this provides a more realistic shape of the post-spiking Vm which is only relevant for more realistic channels that key off of Vm -- does not otherwise affect standard computation", Directives: gti.Directives{}, Tag: "def:\"1.6667\""}},
		{"Exp", &gti.Field{Name: "Exp", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "if true, turn on exponential excitatory current that drives Vm rapidly upward for spiking as it gets past its nominal firing threshold (Thr) -- nicely captures the Hodgkin Huxley dynamics of Na and K channels -- uses Brette & Gurstner 2005 AdEx formulation", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"ExpSlope", &gti.Field{Name: "ExpSlope", Type: "float32", LocalType: "float32", Doc: "slope in Vm (2 mV = .02 in normalized units) for extra exponential excitatory current that drives Vm rapidly upward for spiking as it gets past its nominal firing threshold (Thr) -- nicely captures the Hodgkin Huxley dynamics of Na and K channels -- uses Brette & Gurstner 2005 AdEx formulation", Directives: gti.Directives{}, Tag: "viewif:\"Exp\" def:\"0.02\""}},
		{"ExpThr", &gti.Field{Name: "ExpThr", Type: "float32", LocalType: "float32", Doc: "membrane potential threshold for actually triggering a spike when using the exponential mechanism", Directives: gti.Directives{}, Tag: "viewif:\"Exp\" def:\"0.9\""}},
		{"MaxHz", &gti.Field{Name: "MaxHz", Type: "float32", LocalType: "float32", Doc: "for translating spiking interval (rate) into rate-code activation equivalent, what is the maximum firing rate associated with a maximum activation value of 1", Directives: gti.Directives{}, Tag: "def:\"180\" min:\"1\""}},
		{"ISITau", &gti.Field{Name: "ISITau", Type: "float32", LocalType: "float32", Doc: "constant for integrating the spiking interval in estimating spiking rate", Directives: gti.Directives{}, Tag: "def:\"5\" min:\"1\""}},
		{"ISIDt", &gti.Field{Name: "ISIDt", Type: "float32", LocalType: "float32", Doc: "rate = 1 / tau", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RDt", &gti.Field{Name: "RDt", Type: "float32", LocalType: "float32", Doc: "rate = 1 / tau", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.DendParams",
	ShortName:  "axon.DendParams",
	IDName:     "dend-params",
	Doc:        "DendParams are the parameters for updating dendrite-specific dynamics",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"GbarExp", &gti.Field{Name: "GbarExp", Type: "float32", LocalType: "float32", Doc: "dendrite-specific strength multiplier of the exponential spiking drive on Vm -- e.g., .5 makes it half as strong as at the soma (which uses Gbar.L as a strength multiplier per the AdEx standard model)", Directives: gti.Directives{}, Tag: "def:\"0.2,0.5\""}},
		{"GbarR", &gti.Field{Name: "GbarR", Type: "float32", LocalType: "float32", Doc: "dendrite-specific conductance of Kdr delayed rectifier currents, used to reset membrane potential for dendrite -- applied for Tr msec", Directives: gti.Directives{}, Tag: "def:\"3,6\""}},
		{"SSGi", &gti.Field{Name: "SSGi", Type: "float32", LocalType: "float32", Doc: "SST+ somatostatin positive slow spiking inhibition level specifically affecting dendritic Vm (VmDend) -- this is important for countering a positive feedback loop from NMDA getting stronger over the course of learning -- also typically requires SubMean = 1 for TrgAvgAct and learning to fully counter this feedback loop.", Directives: gti.Directives{}, Tag: "def:\"0,2\""}},
		{"HasMod", &gti.Field{Name: "HasMod", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "set automatically based on whether this layer has any recv projections that have a GType conductance type of Modulatory -- if so, then multiply GeSyn etc by GModSyn", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ModGain", &gti.Field{Name: "ModGain", Type: "float32", LocalType: "float32", Doc: "multiplicative gain factor on the total modulatory input -- this can also be controlled by the PrjnScale.Abs factor on ModulatoryG inputs, but it is convenient to be able to control on the layer as well.", Directives: gti.Directives{}, Tag: ""}},
		{"ModBase", &gti.Field{Name: "ModBase", Type: "float32", LocalType: "float32", Doc: "baseline modulatory level for modulatory effects -- net modulation is ModBase + ModGain * GModSyn", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.ActInitParams",
	ShortName:  "axon.ActInitParams",
	IDName:     "act-init-params",
	Doc:        "ActInitParams are initial values for key network state variables.\nInitialized in InitActs called by InitWts, and provides target values for DecayState.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Vm", &gti.Field{Name: "Vm", Type: "float32", LocalType: "float32", Doc: "initial membrane potential -- see Erev.L for the resting potential (typically .3)", Directives: gti.Directives{}, Tag: "def:\"0.3\""}},
		{"Act", &gti.Field{Name: "Act", Type: "float32", LocalType: "float32", Doc: "initial activation value -- typically 0", Directives: gti.Directives{}, Tag: "def:\"0\""}},
		{"GeBase", &gti.Field{Name: "GeBase", Type: "float32", LocalType: "float32", Doc: "baseline level of excitatory conductance (net input) -- Ge is initialized to this value, and it is added in as a constant background level of excitatory input -- captures all the other inputs not represented in the model, and intrinsic excitability, etc", Directives: gti.Directives{}, Tag: "def:\"0\""}},
		{"GiBase", &gti.Field{Name: "GiBase", Type: "float32", LocalType: "float32", Doc: "baseline level of inhibitory conductance (net input) -- Gi is initialized to this value, and it is added in as a constant background level of inhibitory input -- captures all the other inputs not represented in the model", Directives: gti.Directives{}, Tag: "def:\"0\""}},
		{"GeVar", &gti.Field{Name: "GeVar", Type: "float32", LocalType: "float32", Doc: "variance (sigma) of gaussian distribution around baseline Ge values, per unit, to establish variability in intrinsic excitability.  value never goes < 0", Directives: gti.Directives{}, Tag: "def:\"0\""}},
		{"GiVar", &gti.Field{Name: "GiVar", Type: "float32", LocalType: "float32", Doc: "variance (sigma) of gaussian distribution around baseline Gi values, per unit, to establish variability in intrinsic excitability.  value never goes < 0", Directives: gti.Directives{}, Tag: "def:\"0\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.DecayParams",
	ShortName: "axon.DecayParams",
	IDName:    "decay-params",
	Doc:       "DecayParams control the decay of activation state in the DecayState function\ncalled in NewState when a new state is to be processed.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"act"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Act", &gti.Field{Name: "Act", Type: "float32", LocalType: "float32", Doc: "proportion to decay most activation state variables toward initial values at start of every ThetaCycle (except those controlled separately below) -- if 1 it is effectively equivalent to full clear, resetting other derived values.  ISI is reset every AlphaCycle to get a fresh sample of activations (doesn't affect direct computation -- only readout).", Directives: gti.Directives{}, Tag: "def:\"0,0.2,0.5,1\" max:\"1\" min:\"0\""}},
		{"Glong", &gti.Field{Name: "Glong", Type: "float32", LocalType: "float32", Doc: "proportion to decay long-lasting conductances, NMDA and GABA, and also the dendritic membrane potential -- when using random stimulus order, it is important to decay this significantly to allow a fresh start -- but set Act to 0 to enable ongoing activity to keep neurons in their sensitive regime.", Directives: gti.Directives{}, Tag: "def:\"0,0.6\" max:\"1\" min:\"0\""}},
		{"AHP", &gti.Field{Name: "AHP", Type: "float32", LocalType: "float32", Doc: "decay of afterhyperpolarization currents, including mAHP, sAHP, and KNa -- has a separate decay because often useful to have this not decay at all even if decay is on.", Directives: gti.Directives{}, Tag: "def:\"0\" max:\"1\" min:\"0\""}},
		{"LearnCa", &gti.Field{Name: "LearnCa", Type: "float32", LocalType: "float32", Doc: "decay of Ca variables driven by spiking activity used in learning: CaSpk* and Ca* variables. These are typically not decayed but may need to be in some situations.", Directives: gti.Directives{}, Tag: "def:\"0\" max:\"1\" min:\"0\""}},
		{"OnRew", &gti.Field{Name: "OnRew", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "decay layer at end of ThetaCycle when there is a global reward -- true by default for PTPred, PTMaint and PFC Super layers", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.DtParams",
	ShortName:  "axon.DtParams",
	IDName:     "dt-params",
	Doc:        "DtParams are time and rate constants for temporal derivatives in Axon (Vm, G)",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Integ", &gti.Field{Name: "Integ", Type: "float32", LocalType: "float32", Doc: "overall rate constant for numerical integration, for all equations at the unit level -- all time constants are specified in millisecond units, with one cycle = 1 msec -- if you instead want to make one cycle = 2 msec, you can do this globally by setting this integ value to 2 (etc).  However, stability issues will likely arise if you go too high.  For improved numerical stability, you may even need to reduce this value to 0.5 or possibly even lower (typically however this is not necessary).  MUST also coordinate this with network.time_inc variable to ensure that global network.time reflects simulated time accurately", Directives: gti.Directives{}, Tag: "def:\"1,0.5\" min:\"0\""}},
		{"VmTau", &gti.Field{Name: "VmTau", Type: "float32", LocalType: "float32", Doc: "membrane potential time constant in cycles, which should be milliseconds typically (tau is roughly how long it takes for value to change significantly -- 1.4x the half-life) -- reflects the capacitance of the neuron in principle -- biological default for AdEx spiking model C = 281 pF = 2.81 normalized", Directives: gti.Directives{}, Tag: "def:\"2.81\" min:\"1\""}},
		{"VmDendTau", &gti.Field{Name: "VmDendTau", Type: "float32", LocalType: "float32", Doc: "dendritic membrane potential time constant in cycles, which should be milliseconds typically (tau is roughly how long it takes for value to change significantly -- 1.4x the half-life) -- reflects the capacitance of the neuron in principle -- biological default for AdEx spiking model C = 281 pF = 2.81 normalized", Directives: gti.Directives{}, Tag: "def:\"5\" min:\"1\""}},
		{"VmSteps", &gti.Field{Name: "VmSteps", Type: "int32", LocalType: "int32", Doc: "number of integration steps to take in computing new Vm value -- this is the one computation that can be most numerically unstable so taking multiple steps with proportionally smaller dt is beneficial", Directives: gti.Directives{}, Tag: "def:\"2\" min:\"1\""}},
		{"GeTau", &gti.Field{Name: "GeTau", Type: "float32", LocalType: "float32", Doc: "time constant for decay of excitatory AMPA receptor conductance.", Directives: gti.Directives{}, Tag: "def:\"5\" min:\"1\""}},
		{"GiTau", &gti.Field{Name: "GiTau", Type: "float32", LocalType: "float32", Doc: "time constant for decay of inhibitory GABAa receptor conductance.", Directives: gti.Directives{}, Tag: "def:\"7\" min:\"1\""}},
		{"IntTau", &gti.Field{Name: "IntTau", Type: "float32", LocalType: "float32", Doc: "time constant for integrating values over timescale of an individual input state (e.g., roughly 200 msec -- theta cycle), used in computing ActInt, GeInt from Ge, and GiInt from GiSyn -- this is used for scoring performance, not for learning, in cycles, which should be milliseconds typically (tau is roughly how long it takes for value to change significantly -- 1.4x the half-life),", Directives: gti.Directives{}, Tag: "def:\"40\" min:\"1\""}},
		{"LongAvgTau", &gti.Field{Name: "LongAvgTau", Type: "float32", LocalType: "float32", Doc: "time constant for integrating slower long-time-scale averages, such as nrn.ActAvg, Pool.ActsMAvg, ActsPAvg -- computed in NewState when a new input state is present (i.e., not msec but in units of a theta cycle) (tau is roughly how long it takes for value to change significantly) -- set lower for smaller models", Directives: gti.Directives{}, Tag: "def:\"20\" min:\"1\""}},
		{"MaxCycStart", &gti.Field{Name: "MaxCycStart", Type: "int32", LocalType: "int32", Doc: "cycle to start updating the SpkMaxCa, SpkMax values within a theta cycle -- early cycles often reflect prior state", Directives: gti.Directives{}, Tag: "def:\"10\" min:\"0\""}},
		{"VmDt", &gti.Field{Name: "VmDt", Type: "float32", LocalType: "float32", Doc: "nominal rate = Integ / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"VmDendDt", &gti.Field{Name: "VmDendDt", Type: "float32", LocalType: "float32", Doc: "nominal rate = Integ / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"DtStep", &gti.Field{Name: "DtStep", Type: "float32", LocalType: "float32", Doc: "1 / VmSteps", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"GeDt", &gti.Field{Name: "GeDt", Type: "float32", LocalType: "float32", Doc: "rate = Integ / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"GiDt", &gti.Field{Name: "GiDt", Type: "float32", LocalType: "float32", Doc: "rate = Integ / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"IntDt", &gti.Field{Name: "IntDt", Type: "float32", LocalType: "float32", Doc: "rate = Integ / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"LongAvgDt", &gti.Field{Name: "LongAvgDt", Type: "float32", LocalType: "float32", Doc: "rate = 1 / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.SpikeNoiseParams",
	ShortName:  "axon.SpikeNoiseParams",
	IDName:     "spike-noise-params",
	Doc:        "SpikeNoiseParams parameterizes background spiking activity impinging on the neuron,\nsimulated using a poisson spiking process.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "add noise simulating background spiking levels", Directives: gti.Directives{}, Tag: ""}},
		{"GeHz", &gti.Field{Name: "GeHz", Type: "float32", LocalType: "float32", Doc: "mean frequency of excitatory spikes -- typically 50Hz but multiple inputs increase rate -- poisson lambda parameter, also the variance", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"100\""}},
		{"Ge", &gti.Field{Name: "Ge", Type: "float32", LocalType: "float32", Doc: "excitatory conductance per spike -- .001 has minimal impact, .01 can be strong, and .15 is needed to influence timing of clamped inputs", Directives: gti.Directives{}, Tag: "viewif:\"On\" min:\"0\""}},
		{"GiHz", &gti.Field{Name: "GiHz", Type: "float32", LocalType: "float32", Doc: "mean frequency of inhibitory spikes -- typically 100Hz fast spiking but multiple inputs increase rate -- poisson lambda parameter, also the variance", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"200\""}},
		{"Gi", &gti.Field{Name: "Gi", Type: "float32", LocalType: "float32", Doc: "excitatory conductance per spike -- .001 has minimal impact, .01 can be strong, and .15 is needed to influence timing of clamped inputs", Directives: gti.Directives{}, Tag: "viewif:\"On\" min:\"0\""}},
		{"GeExpInt", &gti.Field{Name: "GeExpInt", Type: "float32", LocalType: "float32", Doc: "Exp(-Interval) which is the threshold for GeNoiseP as it is updated", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"GiExpInt", &gti.Field{Name: "GiExpInt", Type: "float32", LocalType: "float32", Doc: "Exp(-Interval) which is the threshold for GiNoiseP as it is updated", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.ClampParams",
	ShortName:  "axon.ClampParams",
	IDName:     "clamp-params",
	Doc:        "ClampParams specify how external inputs drive excitatory conductances\n(like a current clamp) -- either adds or overwrites existing conductances.\nNoise is added in either case.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"IsInput", &gti.Field{Name: "IsInput", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "is this a clamped input layer?  set automatically based on layer type at initialization", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"IsTarget", &gti.Field{Name: "IsTarget", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "is this a target layer?  set automatically based on layer type at initialization", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Ge", &gti.Field{Name: "Ge", Type: "float32", LocalType: "float32", Doc: "amount of Ge driven for clamping -- generally use 0.8 for Target layers, 1.5 for Input layers", Directives: gti.Directives{}, Tag: "def:\"0.8,1.5\""}},
		{"Add", &gti.Field{Name: "Add", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "", Directives: gti.Directives{}, Tag: "def:\"false\" view:\"add external conductance on top of any existing -- generally this is not a good idea for target layers (creates a main effect that learning can never match), but may be ok for input layers\""}},
		{"ErrThr", &gti.Field{Name: "ErrThr", Type: "float32", LocalType: "float32", Doc: "threshold on neuron Act activity to count as active for computing error relative to target in PctErr method", Directives: gti.Directives{}, Tag: "def:\"0.5\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.AttnParams",
	ShortName:  "axon.AttnParams",
	IDName:     "attn-params",
	Doc:        "AttnParams determine how the Attn modulates Ge",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "is attentional modulation active?", Directives: gti.Directives{}, Tag: ""}},
		{"Min", &gti.Field{Name: "Min", Type: "float32", LocalType: "float32", Doc: "minimum act multiplier if attention is 0", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"RTThr", &gti.Field{Name: "RTThr", Type: "float32", LocalType: "float32", Doc: "threshold on CaSpkP for determining the reaction time for the Layer -- starts after MaxCycStart to ensure that prior trial activity has had a chance to dissipate.", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.PopCodeParams",
	ShortName:  "axon.PopCodeParams",
	IDName:     "pop-code-params",
	Doc:        "PopCodeParams provides an encoding of scalar value using population code,\nwhere a single continuous (scalar) value is encoded as a gaussian bump\nacross a population of neurons (1 dimensional).\nIt can also modulate rate code and number of neurons active according to the value.\nThis is for layers that represent values as in the PVLV system (from Context.PVLV).\nBoth normalized activation values (1 max) and Ge conductance values can be generated.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "use popcode encoding of variable(s) that this layer represents", Directives: gti.Directives{}, Tag: ""}},
		{"Ge", &gti.Field{Name: "Ge", Type: "float32", LocalType: "float32", Doc: "Ge multiplier for driving excitatory conductance based on PopCode -- multiplies normalized activation values", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.1\""}},
		{"Min", &gti.Field{Name: "Min", Type: "float32", LocalType: "float32", Doc: "minimum value representable -- for GaussBump, typically include extra to allow mean with activity on either side to represent the lowest value you want to encode", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"-0.1\""}},
		{"Max", &gti.Field{Name: "Max", Type: "float32", LocalType: "float32", Doc: "maximum value representable -- for GaussBump, typically include extra to allow mean with activity on either side to represent the lowest value you want to encode", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"1.1\""}},
		{"MinAct", &gti.Field{Name: "MinAct", Type: "float32", LocalType: "float32", Doc: "activation multiplier for values at Min end of range, where values at Max end have an activation of 1 -- if this is &lt; 1, then there is a rate code proportional to the value in addition to the popcode pattern -- see also MinSigma, MaxSigma", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"1,0.5\""}},
		{"MinSigma", &gti.Field{Name: "MinSigma", Type: "float32", LocalType: "float32", Doc: "sigma parameter of a gaussian specifying the tuning width of the coarse-coded units, in normalized 0-1 range -- for Min value -- if MinSigma &lt; MaxSigma then more units are activated for Max values vs. Min values, proportionally", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.1,0.08\""}},
		{"MaxSigma", &gti.Field{Name: "MaxSigma", Type: "float32", LocalType: "float32", Doc: "sigma parameter of a gaussian specifying the tuning width of the coarse-coded units, in normalized 0-1 range -- for Min value -- if MinSigma &lt; MaxSigma then more units are activated for Max values vs. Min values, proportionally", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.1,0.12\""}},
		{"Clip", &gti.Field{Name: "Clip", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "ensure that encoded and decoded value remains within specified range", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.ActParams",
	ShortName:  "axon.ActParams",
	IDName:     "act-params",
	Doc:        "axon.ActParams contains all the activation computation params and functions\nfor basic Axon, at the neuron level .\nThis is included in axon.Layer to drive the computation.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Spikes", &gti.Field{Name: "Spikes", Type: "github.com/emer/axon/axon.SpikeParams", LocalType: "SpikeParams", Doc: "Spiking function parameters", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Dend", &gti.Field{Name: "Dend", Type: "github.com/emer/axon/axon.DendParams", LocalType: "DendParams", Doc: "dendrite-specific parameters", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Init", &gti.Field{Name: "Init", Type: "github.com/emer/axon/axon.ActInitParams", LocalType: "ActInitParams", Doc: "initial values for key network state variables -- initialized in InitActs called by InitWts, and provides target values for DecayState", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Decay", &gti.Field{Name: "Decay", Type: "github.com/emer/axon/axon.DecayParams", LocalType: "DecayParams", Doc: "amount to decay between AlphaCycles, simulating passage of time and effects of saccades etc, especially important for environments with random temporal structure (e.g., most standard neural net training corpora)", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Dt", &gti.Field{Name: "Dt", Type: "github.com/emer/axon/axon.DtParams", LocalType: "DtParams", Doc: "time and rate constants for temporal derivatives / updating of activation state", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Gbar", &gti.Field{Name: "Gbar", Type: "github.com/emer/axon/chans.Chans", LocalType: "chans.Chans", Doc: "maximal conductances levels for channels", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Erev", &gti.Field{Name: "Erev", Type: "github.com/emer/axon/chans.Chans", LocalType: "chans.Chans", Doc: "reversal potentials for each channel", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Clamp", &gti.Field{Name: "Clamp", Type: "github.com/emer/axon/axon.ClampParams", LocalType: "ClampParams", Doc: "how external inputs drive neural activations", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Noise", &gti.Field{Name: "Noise", Type: "github.com/emer/axon/axon.SpikeNoiseParams", LocalType: "SpikeNoiseParams", Doc: "how, where, when, and how much noise to add", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"VmRange", &gti.Field{Name: "VmRange", Type: "goki.dev/etable/v2/minmax.F32", LocalType: "minmax.F32", Doc: "range for Vm membrane potential -- -- important to keep just at extreme range of reversal potentials to prevent numerical instability", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Mahp", &gti.Field{Name: "Mahp", Type: "github.com/emer/axon/chans.MahpParams", LocalType: "chans.MahpParams", Doc: "M-type medium time-scale afterhyperpolarization mAHP current -- this is the primary form of adaptation on the time scale of multiple sequences of spikes", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Sahp", &gti.Field{Name: "Sahp", Type: "github.com/emer/axon/chans.SahpParams", LocalType: "chans.SahpParams", Doc: "slow time-scale afterhyperpolarization sAHP current -- integrates CaSpkD at theta cycle intervals and produces a hard cutoff on sustained activity for any neuron", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"KNa", &gti.Field{Name: "KNa", Type: "github.com/emer/axon/chans.KNaMedSlow", LocalType: "chans.KNaMedSlow", Doc: "sodium-gated potassium channel adaptation parameters -- activates a leak-like current as a function of neural activity (firing = Na influx) at two different time-scales (Slick = medium, Slack = slow)", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"NMDA", &gti.Field{Name: "NMDA", Type: "github.com/emer/axon/chans.NMDAParams", LocalType: "chans.NMDAParams", Doc: "NMDA channel parameters used in computing Gnmda conductance for bistability, and postsynaptic calcium flux used in learning.  Note that Learn.Snmda has distinct parameters used in computing sending NMDA parameters used in learning.", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"MaintNMDA", &gti.Field{Name: "MaintNMDA", Type: "github.com/emer/axon/chans.NMDAParams", LocalType: "chans.NMDAParams", Doc: "NMDA channel parameters used in computing Gnmda conductance for bistability, and postsynaptic calcium flux used in learning.  Note that Learn.Snmda has distinct parameters used in computing sending NMDA parameters used in learning.", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"GabaB", &gti.Field{Name: "GabaB", Type: "github.com/emer/axon/chans.GABABParams", LocalType: "chans.GABABParams", Doc: "GABA-B / GIRK channel parameters", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"VGCC", &gti.Field{Name: "VGCC", Type: "github.com/emer/axon/chans.VGCCParams", LocalType: "chans.VGCCParams", Doc: "voltage gated calcium channels -- provide a key additional source of Ca for learning and positive-feedback loop upstate for active neurons", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"AK", &gti.Field{Name: "AK", Type: "github.com/emer/axon/chans.AKsParams", LocalType: "chans.AKsParams", Doc: "A-type potassium (K) channel that is particularly important for limiting the runaway excitation from VGCC channels", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"SKCa", &gti.Field{Name: "SKCa", Type: "github.com/emer/axon/chans.SKCaParams", LocalType: "chans.SKCaParams", Doc: "small-conductance calcium-activated potassium channel produces the pausing function as a consequence of rapid bursting.", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"AttnMod", &gti.Field{Name: "AttnMod", Type: "github.com/emer/axon/axon.AttnParams", LocalType: "AttnParams", Doc: "Attentional modulation parameters: how Attn modulates Ge", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"PopCode", &gti.Field{Name: "PopCode", Type: "github.com/emer/axon/axon.PopCodeParams", LocalType: "PopCodeParams", Doc: "provides encoding population codes, used to represent a single continuous (scalar) value, across a population of units / neurons (1 dimensional)", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.PrjnGTypes",
	ShortName: "axon.PrjnGTypes",
	IDName:    "prjn-g-types",
	Doc:       "PrjnGTypes represents the conductance (G) effects of a given projection,\nincluding excitatory, inhibitory, and modulatory.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"act_prjn"}},
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.SynComParams",
	ShortName:  "axon.SynComParams",
	IDName:     "syn-com-params",
	Doc:        "SynComParams are synaptic communication parameters:\nused in the Prjn parameters.  Includes delay and\nprobability of failure, and Inhib for inhibitory connections,\nand modulatory projections that have multiplicative-like effects.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"GType", &gti.Field{Name: "GType", Type: "github.com/emer/axon/axon.PrjnGTypes", LocalType: "PrjnGTypes", Doc: "type of conductance (G) communicated by this projection", Directives: gti.Directives{}, Tag: ""}},
		{"Delay", &gti.Field{Name: "Delay", Type: "uint32", LocalType: "uint32", Doc: "additional synaptic delay in msec for inputs arriving at this projection.  Must be <= MaxDelay which is set during network building based on MaxDelay of any existing Prjn in the network.  Delay = 0 means a spike reaches receivers in the next Cycle, which is the minimum time (1 msec).  Biologically, subtract 1 from biological synaptic delay values to set corresponding Delay value.", Directives: gti.Directives{}, Tag: "min:\"0\" def:\"2\""}},
		{"MaxDelay", &gti.Field{Name: "MaxDelay", Type: "uint32", LocalType: "uint32", Doc: "maximum value of Delay -- based on MaxDelay values when the BuildGBuf function was called when the network was built -- cannot set it longer than this, except by calling BuildGBuf on network after changing MaxDelay to a larger value in any projection in the network.", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"PFail", &gti.Field{Name: "PFail", Type: "float32", LocalType: "float32", Doc: "probability of synaptic transmission failure -- if > 0, then weights are turned off at random as a function of PFail (times 1-SWt if PFailSwt)", Directives: gti.Directives{}, Tag: ""}},
		{"PFailSWt", &gti.Field{Name: "PFailSWt", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "if true, then probability of failure is inversely proportional to SWt structural / slow weight value (i.e., multiply PFail * (1-SWt)))", Directives: gti.Directives{}, Tag: ""}},
		{"DelLen", &gti.Field{Name: "DelLen", Type: "uint32", LocalType: "uint32", Doc: "delay length = actual length of the GBuf buffer per neuron = Delay+1 -- just for speed", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.PrjnScaleParams",
	ShortName: "axon.PrjnScaleParams",
	IDName:    "prjn-scale-params",
	Doc:       "PrjnScaleParams are projection scaling parameters: modulates overall strength of projection,\nusing both absolute and relative factors.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"act_prjn"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Rel", &gti.Field{Name: "Rel", Type: "float32", LocalType: "float32", Doc: "relative scaling that shifts balance between different projections -- this is subject to normalization across all other projections into receiving neuron, and determines the GScale.Target for adapting scaling", Directives: gti.Directives{}, Tag: "min:\"0\""}},
		{"Abs", &gti.Field{Name: "Abs", Type: "float32", LocalType: "float32", Doc: "absolute multiplier adjustment factor for the prjn scaling -- can be used to adjust for idiosyncrasies not accommodated by the standard scaling based on initial target activation level and relative scaling factors -- any adaptation operates by directly adjusting scaling factor from the initially computed value", Directives: gti.Directives{}, Tag: "def:\"1\" min:\"0\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.AvgMaxI32",
	ShortName: "axon.AvgMaxI32",
	IDName:    "avg-max-i-32",
	Doc:       "AvgMaxI32 holds average and max statistics for float32,\nand values used for computing them incrementally,\nusing a fixed precision int32 based float representation\nthat can be used with GPU-based atomic add and max functions.\nThis ONLY works for positive values with averages around 1, and\nthe N must be set IN ADVANCE to the correct number of items.\nOnce Calc() is called, the incremental values are reset\nvia Init() so it is always ready for updating without a separate\nInit() pass.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"avgmaxi"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Avg", &gti.Field{Name: "Avg", Type: "float32", LocalType: "float32", Doc: "Average, from Calc when last computed as Sum / N", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Max", &gti.Field{Name: "Max", Type: "float32", LocalType: "float32", Doc: "Maximum value, copied from CurMax in Calc", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Sum", &gti.Field{Name: "Sum", Type: "int32", LocalType: "int32", Doc: "sum for computing average -- incremented in UpdateVal, reset in Calc", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"CurMax", &gti.Field{Name: "CurMax", Type: "int32", LocalType: "int32", Doc: "current maximum value, updated via UpdateVal, reset in Calc", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"N", &gti.Field{Name: "N", Type: "int32", LocalType: "int32", Doc: "number of items in the sum -- this must be set in advance to a known value and it is used in computing the float <-> int conversion factor to maximize precision.", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.AxonNetwork",
	ShortName:  "axon.AxonNetwork",
	IDName:     "axon-network",
	Doc:        "AxonNetwork defines the essential algorithmic API for Axon, at the network level.\nThese are the methods that the user calls in their Sim code:\n* NewState\n* Cycle\n* NewPhase\n* DWt\n* WtFmDwt\nBecause we don't want to have to force the user to use the interface cast in calling\nthese methods, we provide Impl versions here that are the implementations\nwhich the user-facing method calls through the interface cast.\nSpecialized algorithms should thus only change the Impl version, which is what\nis exposed here in this interface.\n\nThere is now a strong constraint that all Cycle level computation takes place\nin one pass at the Layer level, which greatly improves threading efficiency.\n\nAll of the structural API is in emer.Network, which this interface also inherits for\nconvenience.",
	Directives: gti.Directives{},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.AxonLayer",
	ShortName:  "axon.AxonLayer",
	IDName:     "axon-layer",
	Doc:        "AxonLayer defines the essential algorithmic API for Axon, at the layer level.\nThese are the methods that the axon.Network calls on its layers at each step\nof processing.  Other Layer types can selectively re-implement (override) these methods\nto modify the computation, while inheriting the basic behavior for non-overridden methods.\n\nAll of the structural API is in emer.Layer, which this interface also inherits for\nconvenience.",
	Directives: gti.Directives{},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.AxonPrjn",
	ShortName:  "axon.AxonPrjn",
	IDName:     "axon-prjn",
	Doc:        "AxonPrjn defines the essential algorithmic API for Axon, at the projection level.\nThese are the methods that the axon.Layer calls on its prjns at each step\nof processing.  Other Prjn types can selectively re-implement (override) these methods\nto modify the computation, while inheriting the basic behavior for non-overridden methods.\n\nAll of the structural API is in emer.Prjn, which this interface also inherits for\nconvenience.",
	Directives: gti.Directives{},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.AxonPrjns",
	ShortName:  "axon.AxonPrjns",
	IDName:     "axon-prjns",
	Doc:        "",
	Directives: gti.Directives{},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.NetIdxs",
	ShortName: "axon.NetIdxs",
	IDName:    "net-idxs",
	Doc:       "NetIdxs are indexes and sizes for processing network",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"context"}},
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"context"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"context"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"context"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NData", &gti.Field{Name: "NData", Type: "uint32", LocalType: "uint32", Doc: "number of data parallel items to process currently", Directives: gti.Directives{}, Tag: "min:\"1\""}},
		{"NetIdx", &gti.Field{Name: "NetIdx", Type: "uint32", LocalType: "uint32", Doc: "network index in global Networks list of networks -- needed for GPU shader kernel compatible network variable access functions (e.g., NrnV, SynV etc) in CPU mode", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"MaxData", &gti.Field{Name: "MaxData", Type: "uint32", LocalType: "uint32", Doc: "maximum amount of data parallel", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NLayers", &gti.Field{Name: "NLayers", Type: "uint32", LocalType: "uint32", Doc: "number of layers in the network", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NNeurons", &gti.Field{Name: "NNeurons", Type: "uint32", LocalType: "uint32", Doc: "total number of neurons", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NPools", &gti.Field{Name: "NPools", Type: "uint32", LocalType: "uint32", Doc: "total number of pools excluding * MaxData factor", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NSyns", &gti.Field{Name: "NSyns", Type: "uint32", LocalType: "uint32", Doc: "total number of synapses", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"GPUMaxBuffFloats", &gti.Field{Name: "GPUMaxBuffFloats", Type: "uint32", LocalType: "uint32", Doc: "maximum size in float32 (4 bytes) of a GPU buffer -- needed for GPU access", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"GPUSynCaBanks", &gti.Field{Name: "GPUSynCaBanks", Type: "uint32", LocalType: "uint32", Doc: "total number of SynCa banks of GPUMaxBufferBytes arrays in GPU", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"PVLVNPosUSs", &gti.Field{Name: "PVLVNPosUSs", Type: "uint32", LocalType: "uint32", Doc: "total number of PVLV Drives / positive USs", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"PVLVNNegUSs", &gti.Field{Name: "PVLVNNegUSs", Type: "uint32", LocalType: "uint32", Doc: "total number of PVLV Negative USs", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"GvUSnegOff", &gti.Field{Name: "GvUSnegOff", Type: "uint32", LocalType: "uint32", Doc: "offset into GlobalVars for USneg values", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"GvUSnegStride", &gti.Field{Name: "GvUSnegStride", Type: "uint32", LocalType: "uint32", Doc: "stride into GlobalVars for USneg values", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"GvUSposOff", &gti.Field{Name: "GvUSposOff", Type: "uint32", LocalType: "uint32", Doc: "offset into GlobalVars for USpos, Drive, VSPatch values values", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"GvUSposStride", &gti.Field{Name: "GvUSposStride", Type: "uint32", LocalType: "uint32", Doc: "stride into GlobalVars for USpos, Drive, VSPatch values", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.Context",
	ShortName:  "axon.Context",
	IDName:     "context",
	Doc:        "Context contains all of the global context state info\nthat is shared across every step of the computation.\nIt is passed around to all relevant computational functions,\nand is updated on the CPU and synced to the GPU after every cycle.\nIt is the *only* mechanism for communication from CPU to GPU.\nIt contains timing, Testing vs. Training mode, random number context,\nglobal neuromodulation, etc.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Mode", &gti.Field{Name: "Mode", Type: "github.com/emer/emergent/v2/etime.Modes", LocalType: "etime.Modes", Doc: "current evaluation mode, e.g., Train, Test, etc", Directives: gti.Directives{}, Tag: ""}},
		{"Testing", &gti.Field{Name: "Testing", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "if true, the model is being run in a testing mode, so no weight changes or other associated computations are needed.  this flag should only affect learning-related behavior.  Is automatically updated based on Mode != Train", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Phase", &gti.Field{Name: "Phase", Type: "int32", LocalType: "int32", Doc: "phase counter: typicaly 0-1 for minus-plus but can be more phases for other algorithms", Directives: gti.Directives{}, Tag: ""}},
		{"PlusPhase", &gti.Field{Name: "PlusPhase", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "true if this is the plus phase, when the outcome / bursting is occurring, driving positive learning -- else minus phase", Directives: gti.Directives{}, Tag: ""}},
		{"PhaseCycle", &gti.Field{Name: "PhaseCycle", Type: "int32", LocalType: "int32", Doc: "cycle within current phase -- minus or plus", Directives: gti.Directives{}, Tag: ""}},
		{"Cycle", &gti.Field{Name: "Cycle", Type: "int32", LocalType: "int32", Doc: "cycle counter: number of iterations of activation updating (settling) on the current state -- this counts time sequentially until reset with NewState", Directives: gti.Directives{}, Tag: ""}},
		{"ThetaCycles", &gti.Field{Name: "ThetaCycles", Type: "int32", LocalType: "int32", Doc: "length of the theta cycle in terms of 1 msec Cycles -- some network update steps depend on doing something at the end of the theta cycle (e.g., CTCtxtPrjn).", Directives: gti.Directives{}, Tag: "def:\"200\""}},
		{"CyclesTotal", &gti.Field{Name: "CyclesTotal", Type: "int32", LocalType: "int32", Doc: "total cycle count -- increments continuously from whenever it was last reset -- typically this is number of milliseconds in simulation time -- is int32 and not uint32 b/c used with Synapse CaUpT which needs to have a -1 case for expired update time", Directives: gti.Directives{}, Tag: ""}},
		{"Time", &gti.Field{Name: "Time", Type: "float32", LocalType: "float32", Doc: "accumulated amount of time the network has been running, in simulation-time (not real world time), in seconds", Directives: gti.Directives{}, Tag: ""}},
		{"TrialsTotal", &gti.Field{Name: "TrialsTotal", Type: "int32", LocalType: "int32", Doc: "total trial count -- increments continuously in NewState call *only in Train mode* from whenever it was last reset -- can be used for synchronizing weight updates across nodes", Directives: gti.Directives{}, Tag: ""}},
		{"TimePerCycle", &gti.Field{Name: "TimePerCycle", Type: "float32", LocalType: "float32", Doc: "amount of time to increment per cycle", Directives: gti.Directives{}, Tag: "def:\"0.001\""}},
		{"SlowInterval", &gti.Field{Name: "SlowInterval", Type: "int32", LocalType: "int32", Doc: "how frequently to perform slow adaptive processes such as synaptic scaling, inhibition adaptation, associated in the brain with sleep, in the SlowAdapt method.  This should be long enough for meaningful changes to accumulate -- 100 is default but could easily be longer in larger models.  Because SlowCtr is incremented by NData, high NData cases (e.g. 16) likely need to increase this value -- e.g., 400 seems to produce overall consistent results in various models.", Directives: gti.Directives{}, Tag: "def:\"100\""}},
		{"SlowCtr", &gti.Field{Name: "SlowCtr", Type: "int32", LocalType: "int32", Doc: "counter for how long it has been since last SlowAdapt step.  Note that this is incremented by NData to maintain consistency across different values of this parameter.", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"SynCaCtr", &gti.Field{Name: "SynCaCtr", Type: "float32", LocalType: "float32", Doc: "synaptic calcium counter, which drives the CaUpT synaptic value to optimize updating of this computationally expensive factor. It is incremented by 1 for each cycle, and reset at the SlowInterval, at which point the synaptic calcium values are all reset.", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"NetIdxs", &gti.Field{Name: "NetIdxs", Type: "github.com/emer/axon/axon.NetIdxs", LocalType: "NetIdxs", Doc: "indexes and sizes of current network", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"NeuronVars", &gti.Field{Name: "NeuronVars", Type: "github.com/emer/axon/axon.NeuronVarStrides", LocalType: "NeuronVarStrides", Doc: "stride offsets for accessing neuron variables", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"NeuronAvgVars", &gti.Field{Name: "NeuronAvgVars", Type: "github.com/emer/axon/axon.NeuronAvgVarStrides", LocalType: "NeuronAvgVarStrides", Doc: "stride offsets for accessing neuron average variables", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"NeuronIdxs", &gti.Field{Name: "NeuronIdxs", Type: "github.com/emer/axon/axon.NeuronIdxStrides", LocalType: "NeuronIdxStrides", Doc: "stride offsets for accessing neuron indexes", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseVars", &gti.Field{Name: "SynapseVars", Type: "github.com/emer/axon/axon.SynapseVarStrides", LocalType: "SynapseVarStrides", Doc: "stride offsets for accessing synapse variables", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCaVars", &gti.Field{Name: "SynapseCaVars", Type: "github.com/emer/axon/axon.SynapseCaStrides", LocalType: "SynapseCaStrides", Doc: "stride offsets for accessing synapse Ca variables", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseIdxs", &gti.Field{Name: "SynapseIdxs", Type: "github.com/emer/axon/axon.SynapseIdxStrides", LocalType: "SynapseIdxStrides", Doc: "stride offsets for accessing synapse indexes", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RandCtr", &gti.Field{Name: "RandCtr", Type: "goki.dev/gosl/v2/slrand.Counter", LocalType: "slrand.Counter", Doc: "random counter -- incremented by maximum number of possible random numbers generated per cycle, regardless of how many are actually used -- this is shared across all layers so must encompass all possible param settings.", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.BurstParams",
	ShortName: "axon.BurstParams",
	IDName:    "burst-params",
	Doc:       "BurstParams determine how the 5IB Burst activation is computed from\nCaSpkP integrated spiking values in Super layers -- thresholded.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"deep_layers"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"ThrRel", &gti.Field{Name: "ThrRel", Type: "float32", LocalType: "float32", Doc: "Relative component of threshold on superficial activation value, below which it does not drive Burst (and above which, Burst = CaSpkP).  This is the distance between the average and maximum activation values within layer (e.g., 0 = average, 1 = max).  Overall effective threshold is MAX of relative and absolute thresholds.", Directives: gti.Directives{}, Tag: "max:\"1\" def:\"0.1\""}},
		{"ThrAbs", &gti.Field{Name: "ThrAbs", Type: "float32", LocalType: "float32", Doc: "Absolute component of threshold on superficial activation value, below which it does not drive Burst (and above which, Burst = CaSpkP).  Overall effective threshold is MAX of relative and absolute thresholds.", Directives: gti.Directives{}, Tag: "min:\"0\" max:\"1\" def:\"0.1\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.CTParams",
	ShortName:  "axon.CTParams",
	IDName:     "ct-params",
	Doc:        "CTParams control the CT corticothalamic neuron special behavior",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"GeGain", &gti.Field{Name: "GeGain", Type: "float32", LocalType: "float32", Doc: "gain factor for context excitatory input, which is constant as compared to the spiking input from other projections, so it must be downscaled accordingly.  This can make a difference and may need to be scaled up or down.", Directives: gti.Directives{}, Tag: "def:\"0.05,0.1,1,2\""}},
		{"DecayTau", &gti.Field{Name: "DecayTau", Type: "float32", LocalType: "float32", Doc: "decay time constant for context Ge input -- if > 0, decays over time so intrinsic circuit dynamics have to take over.  For single-step copy-based cases, set to 0, while longer-time-scale dynamics should use 50", Directives: gti.Directives{}, Tag: "def:\"0,50\""}},
		{"DecayDt", &gti.Field{Name: "DecayDt", Type: "float32", LocalType: "float32", Doc: "1 / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.PulvParams",
	ShortName:  "axon.PulvParams",
	IDName:     "pulv-params",
	Doc:        "PulvParams provides parameters for how the plus-phase (outcome)\nstate of Pulvinar thalamic relay cell neurons is computed from\nthe corresponding driver neuron Burst activation (or CaSpkP if not Super)",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"DriveScale", &gti.Field{Name: "DriveScale", Type: "float32", LocalType: "float32", Doc: "multiplier on driver input strength, multiplies CaSpkP from driver layer to produce Ge excitatory input to Pulv unit.", Directives: gti.Directives{}, Tag: "def:\"0.1\" min:\"0.0\""}},
		{"FullDriveAct", &gti.Field{Name: "FullDriveAct", Type: "float32", LocalType: "float32", Doc: "Level of Max driver layer CaSpkP at which the drivers fully drive the burst phase activation.  If there is weaker driver input, then (Max/FullDriveAct) proportion of the non-driver inputs remain and this critically prevents the network from learning to turn activation off, which is difficult and severely degrades learning.", Directives: gti.Directives{}, Tag: "def:\"0.6\" min:\"0.01\""}},
		{"DriveLayIdx", &gti.Field{Name: "DriveLayIdx", Type: "int32", LocalType: "int32", Doc: "index of layer that generates the driving activity into this one -- set via SetBuildConfig(DriveLayName) setting", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.GlobalVars",
	ShortName: "axon.GlobalVars",
	IDName:    "global-vars",
	Doc:       "GlobalVars are network-wide variables, such as neuromodulators, reward, drives, etc\nincluding the state for the PVLV phasic dopamine model.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"globals"}},
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.PushOff",
	ShortName:  "axon.PushOff",
	IDName:     "push-off",
	Doc:        "PushOff has push constants for setting offset into compute shader",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Off", &gti.Field{Name: "Off", Type: "uint32", LocalType: "uint32", Doc: "offset", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.GPU",
	ShortName:  "axon.GPU",
	IDName:     "gpu",
	Doc:        "GPU manages all of the GPU-based computation for a given Network.\nLives within the network.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "bool", LocalType: "bool", Doc: "if true, actually use the GPU", Directives: gti.Directives{}, Tag: ""}},
		{"RecFunTimes", &gti.Field{Name: "RecFunTimes", Type: "bool", LocalType: "bool", Doc: "", Directives: gti.Directives{}, Tag: "desc:\"if true, slower separate shader pipeline runs are used, with a CPU-sync Wait at the end, to enable timing information about each individual shader to be collected using the network FunTimer system.  otherwise, only aggregate information is available about the entire Cycle call."}},
		{"CycleByCycle", &gti.Field{Name: "CycleByCycle", Type: "bool", LocalType: "bool", Doc: "if true, process each cycle one at a time.  Otherwise, 10 cycles at a time are processed in one batch.", Directives: gti.Directives{}, Tag: ""}},
		{"Net", &gti.Field{Name: "Net", Type: "*github.com/emer/axon/axon.Network", LocalType: "*Network", Doc: "the network we operate on -- we live under this net", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Ctx", &gti.Field{Name: "Ctx", Type: "*github.com/emer/axon/axon.Context", LocalType: "*Context", Doc: "the context we use", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Sys", &gti.Field{Name: "Sys", Type: "*github.com/goki/vgpu/vgpu.System", LocalType: "*vgpu.System", Doc: "the vgpu compute system", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Params", &gti.Field{Name: "Params", Type: "*github.com/goki/vgpu/vgpu.VarSet", LocalType: "*vgpu.VarSet", Doc: "VarSet = 0: the uniform LayerParams", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Idxs", &gti.Field{Name: "Idxs", Type: "*github.com/goki/vgpu/vgpu.VarSet", LocalType: "*vgpu.VarSet", Doc: "VarSet = 1: the storage indexes and PrjnParams", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Structs", &gti.Field{Name: "Structs", Type: "*github.com/goki/vgpu/vgpu.VarSet", LocalType: "*vgpu.VarSet", Doc: "VarSet = 2: the Storage buffer for RW state structs and neuron floats", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Syns", &gti.Field{Name: "Syns", Type: "*github.com/goki/vgpu/vgpu.VarSet", LocalType: "*vgpu.VarSet", Doc: "Varset = 3: the Storage buffer for synapses", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynCas", &gti.Field{Name: "SynCas", Type: "*github.com/goki/vgpu/vgpu.VarSet", LocalType: "*vgpu.VarSet", Doc: "Varset = 4: the Storage buffer for SynCa banks", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Semaphores", &gti.Field{Name: "Semaphores", Type: "map[string]github.com/goki/vulkan.Semaphore", LocalType: "map[string]vk.Semaphore", Doc: "for sequencing commands", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"NThreads", &gti.Field{Name: "NThreads", Type: "int", LocalType: "int", Doc: "number of warp threads -- typically 64 -- must update all hlsl files if changed!", Directives: gti.Directives{}, Tag: "view:\"-\" inactive:\"-\" def:\"64\""}},
		{"MaxBufferBytes", &gti.Field{Name: "MaxBufferBytes", Type: "uint32", LocalType: "uint32", Doc: "maximum number of bytes per individual storage buffer element, from GPUProps.Limits.MaxStorageBufferRange", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCas0", &gti.Field{Name: "SynapseCas0", Type: "[]float32", LocalType: "[]float32", Doc: "bank of floats for GPU access", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCas1", &gti.Field{Name: "SynapseCas1", Type: "[]float32", LocalType: "[]float32", Doc: "bank of floats for GPU access", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCas2", &gti.Field{Name: "SynapseCas2", Type: "[]float32", LocalType: "[]float32", Doc: "bank of floats for GPU access", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCas3", &gti.Field{Name: "SynapseCas3", Type: "[]float32", LocalType: "[]float32", Doc: "bank of floats for GPU access", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCas4", &gti.Field{Name: "SynapseCas4", Type: "[]float32", LocalType: "[]float32", Doc: "bank of floats for GPU access", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCas5", &gti.Field{Name: "SynapseCas5", Type: "[]float32", LocalType: "[]float32", Doc: "bank of floats for GPU access", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCas6", &gti.Field{Name: "SynapseCas6", Type: "[]float32", LocalType: "[]float32", Doc: "bank of floats for GPU access", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCas7", &gti.Field{Name: "SynapseCas7", Type: "[]float32", LocalType: "[]float32", Doc: "bank of floats for GPU access", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"DidBind", &gti.Field{Name: "DidBind", Type: "map[string]bool", LocalType: "map[string]bool", Doc: "tracks var binding", Directives: gti.Directives{}, Tag: "view:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.HipConfig",
	ShortName:  "axon.HipConfig",
	IDName:     "hip-config",
	Doc:        "HipConfig have the hippocampus size and connectivity parameters",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"EC2Size", &gti.Field{Name: "EC2Size", Type: "github.com/emer/emergent/v2/evec.Vec2i", LocalType: "evec.Vec2i", Doc: "size of EC2", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
		{"EC3NPool", &gti.Field{Name: "EC3NPool", Type: "github.com/emer/emergent/v2/evec.Vec2i", LocalType: "evec.Vec2i", Doc: "number of EC3 pools (outer dimension)", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
		{"EC3NNrn", &gti.Field{Name: "EC3NNrn", Type: "github.com/emer/emergent/v2/evec.Vec2i", LocalType: "evec.Vec2i", Doc: "number of neurons in one EC3 pool", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
		{"CA1NNrn", &gti.Field{Name: "CA1NNrn", Type: "github.com/emer/emergent/v2/evec.Vec2i", LocalType: "evec.Vec2i", Doc: "number of neurons in one CA1 pool", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
		{"CA3Size", &gti.Field{Name: "CA3Size", Type: "github.com/emer/emergent/v2/evec.Vec2i", LocalType: "evec.Vec2i", Doc: "size of CA3", Directives: gti.Directives{}, Tag: "nest:\"+\""}},
		{"DGRatio", &gti.Field{Name: "DGRatio", Type: "float32", LocalType: "float32", Doc: "size of DG / CA3", Directives: gti.Directives{}, Tag: "def:\"2.236\""}},
		{"EC3ToEC2PCon", &gti.Field{Name: "EC3ToEC2PCon", Type: "float32", LocalType: "float32", Doc: "percent connectivity from EC3 to EC2", Directives: gti.Directives{}, Tag: "def:\"0.1\""}},
		{"EC2ToDGPCon", &gti.Field{Name: "EC2ToDGPCon", Type: "float32", LocalType: "float32", Doc: "percent connectivity from EC2 to DG", Directives: gti.Directives{}, Tag: "def:\"0.25\""}},
		{"EC2ToCA3PCon", &gti.Field{Name: "EC2ToCA3PCon", Type: "float32", LocalType: "float32", Doc: "percent connectivity from EC2 to CA3", Directives: gti.Directives{}, Tag: "def:\"0.25\""}},
		{"CA3ToCA1PCon", &gti.Field{Name: "CA3ToCA1PCon", Type: "float32", LocalType: "float32", Doc: "percent connectivity from CA3 to CA1", Directives: gti.Directives{}, Tag: "def:\"0.25\""}},
		{"DGToCA3PCon", &gti.Field{Name: "DGToCA3PCon", Type: "float32", LocalType: "float32", Doc: "percent connectivity into CA3 from DG", Directives: gti.Directives{}, Tag: "def:\"0.02\""}},
		{"EC2LatRadius", &gti.Field{Name: "EC2LatRadius", Type: "int", LocalType: "int", Doc: "lateral radius of connectivity in EC2", Directives: gti.Directives{}, Tag: ""}},
		{"EC2LatSigma", &gti.Field{Name: "EC2LatSigma", Type: "float32", LocalType: "float32", Doc: "lateral gaussian sigma in EC2 for how quickly weights fall off with distance", Directives: gti.Directives{}, Tag: ""}},
		{"MossyDelta", &gti.Field{Name: "MossyDelta", Type: "float32", LocalType: "float32", Doc: "proportion of full mossy fiber strength (PrjnScale.Rel) for CA3 EDL in training, applied at the start of a trial to reduce DG -> CA3 strength.  1 = fully reduce strength, .5 = 50% reduction, etc", Directives: gti.Directives{}, Tag: "def:\"1\""}},
		{"MossyDeltaTest", &gti.Field{Name: "MossyDeltaTest", Type: "float32", LocalType: "float32", Doc: "proportion of full mossy fiber strength (PrjnScale.Rel) for CA3 EDL in testing, applied during 2nd-3rd quarters to reduce DG -> CA3 strength.  1 = fully reduce strength, .5 = 50% reduction, etc", Directives: gti.Directives{}, Tag: "def:\"0.75\""}},
		{"ThetaLow", &gti.Field{Name: "ThetaLow", Type: "float32", LocalType: "float32", Doc: "low theta modulation value for temporal difference EDL -- sets PrjnScale.Rel on CA1 <-> EC prjns consistent with Theta phase model", Directives: gti.Directives{}, Tag: "def:\"0.9\""}},
		{"ThetaHigh", &gti.Field{Name: "ThetaHigh", Type: "float32", LocalType: "float32", Doc: "high theta modulation value for temporal difference EDL -- sets PrjnScale.Rel on CA1 <-> EC prjns consistent with Theta phase model", Directives: gti.Directives{}, Tag: "def:\"1\""}},
		{"EC5Clamp", &gti.Field{Name: "EC5Clamp", Type: "bool", LocalType: "bool", Doc: "flag for clamping the EC5 from EC5ClampSrc", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"EC5ClampSrc", &gti.Field{Name: "EC5ClampSrc", Type: "string", LocalType: "string", Doc: "source layer for EC5 clamping activations in the plus phase -- biologically it is EC3 but can use an Input layer if available", Directives: gti.Directives{}, Tag: "def:\"EC3\""}},
		{"EC5ClampTest", &gti.Field{Name: "EC5ClampTest", Type: "bool", LocalType: "bool", Doc: "clamp the EC5 from EC5ClampSrc during testing as well as training -- this will overwrite any target values that might be used in stats (e.g., in the basic hip example), so it must be turned off there", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"EC5ClampThr", &gti.Field{Name: "EC5ClampThr", Type: "float32", LocalType: "float32", Doc: "threshold for binarizing EC5 clamp values -- any value above this is clamped to 1, else 0 -- helps produce a cleaner learning signal.  Set to 0 to not perform any binarization.", Directives: gti.Directives{}, Tag: "def:\"0.1\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.HipPrjnParams",
	ShortName: "axon.HipPrjnParams",
	IDName:    "hip-prjn-params",
	Doc:       "HipPrjnParams define behavior of hippocampus prjns, which have special learning rules",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"hip_prjns"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Hebb", &gti.Field{Name: "Hebb", Type: "float32", LocalType: "float32", Doc: "Hebbian learning proportion", Directives: gti.Directives{}, Tag: "def:\"0\""}},
		{"Err", &gti.Field{Name: "Err", Type: "float32", LocalType: "float32", Doc: "EDL proportion", Directives: gti.Directives{}, Tag: "def:\"1\""}},
		{"SAvgCor", &gti.Field{Name: "SAvgCor", Type: "float32", LocalType: "float32", Doc: "proportion of correction to apply to sending average activation for hebbian learning component (0=none, 1=all, .5=half, etc)", Directives: gti.Directives{}, Tag: "def:\"0.4:0.8\" min:\"0\" max:\"1\""}},
		{"SAvgThr", &gti.Field{Name: "SAvgThr", Type: "float32", LocalType: "float32", Doc: "threshold of sending average activation below which learning does not occur (prevents learning when there is no input)", Directives: gti.Directives{}, Tag: "def:\"0.01\" min:\"0\""}},
		{"SNominal", &gti.Field{Name: "SNominal", Type: "float32", LocalType: "float32", Doc: "sending layer Nominal (need to manually set it to be the same as the sending layer)", Directives: gti.Directives{}, Tag: "def:\"0.1\" min:\"0\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.ActAvgParams",
	ShortName: "axon.ActAvgParams",
	IDName:    "act-avg-params",
	Doc:       "ActAvgParams represents the nominal average activity levels in the layer\nand parameters for adapting the computed Gi inhibition levels to maintain\naverage activity within a target range.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"inhib"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"inhib"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"inhib"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Nominal", &gti.Field{Name: "Nominal", Type: "float32", LocalType: "float32", Doc: "nominal estimated average activity level in the layer, which is used in computing the scaling factor on sending projections from this layer.  In general it should roughly match the layer ActAvg.ActMAvg value, which can be logged using the axon.LogAddDiagnosticItems function.  If layers receiving from this layer are not getting enough Ge excitation, then this Nominal level can be lowered to increase projection strength (fewer active neurons means each one contributes more, so scaling factor goes as the inverse of activity level), or vice-versa if Ge is too high.  It is also the basis for the target activity level used for the AdaptGi option -- see the Offset which is added to this value.", Directives: gti.Directives{}, Tag: "min:\"0\" step:\"0.01\""}},
		{"AdaptGi", &gti.Field{Name: "AdaptGi", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "enable adapting of layer inhibition Gi multiplier factor (stored in layer GiMult value) to maintain a Target layer level of ActAvg.ActMAvg.  This generally works well and improves the long-term stability of the models.  It is not enabled by default because it depends on having established a reasonable Nominal + Offset target activity level.", Directives: gti.Directives{}, Tag: ""}},
		{"Offset", &gti.Field{Name: "Offset", Type: "float32", LocalType: "float32", Doc: "offset to add to Nominal for the target average activity that drives adaptation of Gi for this layer.  Typically the Nominal level is good, but sometimes Nominal must be adjusted up or down to achieve desired Ge scaling, so this Offset can compensate accordingly.", Directives: gti.Directives{}, Tag: "def:\"0\" min:\"0\" step:\"0.01\" viewif:\"AdaptGi\""}},
		{"HiTol", &gti.Field{Name: "HiTol", Type: "float32", LocalType: "float32", Doc: "tolerance for higher than Target target average activation as a proportion of that target value (0 = exactly the target, 0.2 = 20% higher than target) -- only once activations move outside this tolerance are inhibitory values adapted.", Directives: gti.Directives{}, Tag: "def:\"0\" viewif:\"AdaptGi\""}},
		{"LoTol", &gti.Field{Name: "LoTol", Type: "float32", LocalType: "float32", Doc: "tolerance for lower than Target target average activation as a proportion of that target value (0 = exactly the target, 0.5 = 50% lower than target) -- only once activations move outside this tolerance are inhibitory values adapted.", Directives: gti.Directives{}, Tag: "def:\"0.8\" viewif:\"AdaptGi\""}},
		{"AdaptRate", &gti.Field{Name: "AdaptRate", Type: "float32", LocalType: "float32", Doc: "rate of Gi adaptation as function of AdaptRate * (Target - ActMAvg) / Target -- occurs at spaced intervals determined by Network.SlowInterval value -- slower values such as 0.01 may be needed for large networks and sparse layers.", Directives: gti.Directives{}, Tag: "def:\"0.1\" viewif:\"AdaptGi\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.TopoInhibParams",
	ShortName:  "axon.TopoInhibParams",
	IDName:     "topo-inhib-params",
	Doc:        "TopoInhibParams provides for topographic gaussian inhibition integrating over neighborhood.\nTODO: not currently being used",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "use topographic inhibition", Directives: gti.Directives{}, Tag: ""}},
		{"Width", &gti.Field{Name: "Width", Type: "int32", LocalType: "int32", Doc: "half-width of topographic inhibition within layer", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"Sigma", &gti.Field{Name: "Sigma", Type: "float32", LocalType: "float32", Doc: "normalized gaussian sigma as proportion of Width, for gaussian weighting", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"Wrap", &gti.Field{Name: "Wrap", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "half-width of topographic inhibition within layer", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"Gi", &gti.Field{Name: "Gi", Type: "float32", LocalType: "float32", Doc: "overall inhibition multiplier for topographic inhibition (generally <= 1)", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"FF", &gti.Field{Name: "FF", Type: "float32", LocalType: "float32", Doc: "overall inhibitory contribution from feedforward inhibition -- multiplies average Ge from pools or Ge from neurons", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"FB", &gti.Field{Name: "FB", Type: "float32", LocalType: "float32", Doc: "overall inhibitory contribution from feedback inhibition -- multiplies average activation from pools or Act from neurons", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"FF0", &gti.Field{Name: "FF0", Type: "float32", LocalType: "float32", Doc: "feedforward zero point for Ge per neuron (summed Ge is compared to N * FF0) -- below this level, no FF inhibition is computed, above this it is FF * (Sum Ge - N * FF0)", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"WidthWt", &gti.Field{Name: "WidthWt", Type: "float32", LocalType: "float32", Doc: "weight value at width -- to assess the value of Sigma", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.InhibParams",
	ShortName:  "axon.InhibParams",
	IDName:     "inhib-params",
	Doc:        "axon.InhibParams contains all the inhibition computation params and functions for basic Axon\nThis is included in axon.Layer to support computation.\nThis also includes other misc layer-level params such as expected average activation in the layer\nwhich is used for Ge rescaling and potentially for adapting inhibition over time",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"ActAvg", &gti.Field{Name: "ActAvg", Type: "github.com/emer/axon/axon.ActAvgParams", LocalType: "ActAvgParams", Doc: "layer-level and pool-level average activation initial values and updating / adaptation thereof -- initial values help determine initial scaling factors.", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Layer", &gti.Field{Name: "Layer", Type: "github.com/emer/axon/fsfffb.GiParams", LocalType: "fsfffb.GiParams", Doc: "inhibition across the entire layer -- inputs generally use Gi = 0.8 or 0.9, 1.3 or higher for sparse layers.  If the layer has sub-pools (4D shape) then this is effectively between-pool inhibition.", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Pool", &gti.Field{Name: "Pool", Type: "github.com/emer/axon/fsfffb.GiParams", LocalType: "fsfffb.GiParams", Doc: "inhibition within sub-pools of units, for layers with 4D shape -- almost always need this if the layer has pools.", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.Layer",
	ShortName:  "axon.Layer",
	IDName:     "layer",
	Doc:        "axon.Layer implements the basic Axon spiking activation function,\nand manages learning in the projections.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Params", &gti.Field{Name: "Params", Type: "*github.com/emer/axon/axon.LayerParams", LocalType: "*LayerParams", Doc: "all layer-level parameters -- these must remain constant once configured", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"LayerBase", &gti.Field{Name: "LayerBase", Type: "github.com/emer/axon/axon.LayerBase", LocalType: "LayerBase", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.LayerBase",
	ShortName:  "axon.LayerBase",
	IDName:     "layer-base",
	Doc:        "LayerBase manages the structural elements of the layer, which are common\nto any Layer type.\nThe Base does not have algorithm-specific methods and parameters, so it can be easily\nreused for different algorithms, and cleanly separates the algorithm-specific code.\nAny dependency on the algorithm-level Layer can be captured in the AxonLayer interface,\naccessed via the AxonLay field.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"AxonLay", &gti.Field{Name: "AxonLay", Type: "github.com/emer/axon/axon.AxonLayer", LocalType: "AxonLayer", Doc: "we need a pointer to ourselves as an AxonLayer (which subsumes emer.Layer), which can always be used to extract the true underlying type of object when layer is embedded in other structs -- function receivers do not have this ability so this is necessary.", Directives: gti.Directives{}, Tag: "copy:\"-\" json:\"-\" xml:\"-\" view:\"-\""}},
		{"Network", &gti.Field{Name: "Network", Type: "*github.com/emer/axon/axon.Network", LocalType: "*Network", Doc: "our parent network, in case we need to use it to find other layers etc -- set when added by network", Directives: gti.Directives{}, Tag: "copy:\"-\" json:\"-\" xml:\"-\" view:\"-\""}},
		{"Nm", &gti.Field{Name: "Nm", Type: "string", LocalType: "string", Doc: "Name of the layer -- this must be unique within the network, which has a map for quick lookup and layers are typically accessed directly by name", Directives: gti.Directives{}, Tag: ""}},
		{"Cls", &gti.Field{Name: "Cls", Type: "string", LocalType: "string", Doc: "Class is for applying parameter styles, can be space separated multple tags", Directives: gti.Directives{}, Tag: ""}},
		{"Off", &gti.Field{Name: "Off", Type: "bool", LocalType: "bool", Doc: "inactivate this layer -- allows for easy experimentation", Directives: gti.Directives{}, Tag: ""}},
		{"Shp", &gti.Field{Name: "Shp", Type: "goki.dev/etable/v2/etensor.Shape", LocalType: "etensor.Shape", Doc: "shape of the layer -- can be 2D for basic layers and 4D for layers with sub-groups (hypercolumns) -- order is outer-to-inner (row major) so Y then X for 2D and for 4D: Y-X unit pools then Y-X neurons within pools", Directives: gti.Directives{}, Tag: ""}},
		{"Typ", &gti.Field{Name: "Typ", Type: "github.com/emer/axon/axon.LayerTypes", LocalType: "LayerTypes", Doc: "type of layer -- Hidden, Input, Target, Compare, or extended type in specialized algorithms -- matches against .Class parameter styles (e.g., .Hidden etc)", Directives: gti.Directives{}, Tag: ""}},
		{"Rel", &gti.Field{Name: "Rel", Type: "github.com/emer/emergent/v2/relpos.Rel", LocalType: "relpos.Rel", Doc: "Spatial relationship to other layer, determines positioning", Directives: gti.Directives{}, Tag: "tableview:\"-\" view:\"inline\""}},
		{"Ps", &gti.Field{Name: "Ps", Type: "goki.dev/mat32/v2.Vec3", LocalType: "mat32.Vec3", Doc: "position of lower-left-hand corner of layer in 3D space, computed from Rel.  Layers are in X-Y width - height planes, stacked vertically in Z axis.", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"Idx", &gti.Field{Name: "Idx", Type: "int", LocalType: "int", Doc: "a 0..n-1 index of the position of the layer within list of layers in the network. For Axon networks, it only has significance in determining who gets which weights for enforcing initial weight symmetry -- higher layers get weights from lower layers.", Directives: gti.Directives{}, Tag: "view:\"-\" inactive:\"-\""}},
		{"NNeurons", &gti.Field{Name: "NNeurons", Type: "uint32", LocalType: "uint32", Doc: "number of neurons in the layer", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"NeurStIdx", &gti.Field{Name: "NeurStIdx", Type: "uint32", LocalType: "uint32", Doc: "starting index of neurons for this layer within the global Network list", Directives: gti.Directives{}, Tag: "view:\"-\" inactive:\"-\""}},
		{"NPools", &gti.Field{Name: "NPools", Type: "uint32", LocalType: "uint32", Doc: "number of pools based on layer shape -- at least 1 for layer pool + 4D subpools", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"MaxData", &gti.Field{Name: "MaxData", Type: "uint32", LocalType: "uint32", Doc: "maximum amount of input data that can be processed in parallel in one pass of the network. Neuron, Pool, Vals storage is allocated to hold this amount.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RepIxs", &gti.Field{Name: "RepIxs", Type: "[]int", LocalType: "[]int", Doc: "indexes of representative units in the layer, for computationally expensive stats or displays -- also set RepShp", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RepShp", &gti.Field{Name: "RepShp", Type: "goki.dev/etable/v2/etensor.Shape", LocalType: "etensor.Shape", Doc: "shape of representative units in the layer -- if RepIxs is empty or .Shp is nil, use overall layer shape", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RcvPrjns", &gti.Field{Name: "RcvPrjns", Type: "github.com/emer/axon/axon.AxonPrjns", LocalType: "AxonPrjns", Doc: "list of receiving projections into this layer from other layers", Directives: gti.Directives{}, Tag: ""}},
		{"SndPrjns", &gti.Field{Name: "SndPrjns", Type: "github.com/emer/axon/axon.AxonPrjns", LocalType: "AxonPrjns", Doc: "list of sending projections from this layer to other layers", Directives: gti.Directives{}, Tag: ""}},
		{"Vals", &gti.Field{Name: "Vals", Type: "[]github.com/emer/axon/axon.LayerVals", LocalType: "[]LayerVals", Doc: "layer-level state values that are updated during computation -- one for each data parallel -- is a sub-slice of network full set", Directives: gti.Directives{}, Tag: ""}},
		{"Pools", &gti.Field{Name: "Pools", Type: "[]github.com/emer/axon/axon.Pool", LocalType: "[]Pool", Doc: "computes FS-FFFB inhibition and other pooled, aggregate state variables -- has at least 1 for entire layer (lpl = layer pool), and one for each sub-pool if shape supports that (4D) * 1 per data parallel (inner loop).  This is a sub-slice from overall Network Pools slice.  You must iterate over index and use pointer to modify values.", Directives: gti.Directives{}, Tag: ""}},
		{"Exts", &gti.Field{Name: "Exts", Type: "[]float32", LocalType: "[]float32", Doc: "external input values for this layer, allocated from network global Exts slice", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"BuildConfig", &gti.Field{Name: "BuildConfig", Type: "map[string]string", LocalType: "map[string]string", Doc: "configuration data set when the network is configured, that is used during the network Build() process via PostBuild method, after all the structure of the network has been fully constructed.  In particular, the Params is nil until Build, so setting anything specific in there (e.g., an index to another layer) must be done as a second pass.  Note that Params are all applied after Build and can set user-modifiable params, so this is for more special algorithm structural parameters set during ConfigNet() methods.,", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"DefParams", &gti.Field{Name: "DefParams", Type: "github.com/emer/emergent/v2/params.Params", LocalType: "params.Params", Doc: "default parameters that are applied prior to user-set parameters -- these are useful for specific layer functionality in specialized brain areas (e.g., PVLV, BG etc) not associated with a layer type, which otherwise is used to hard-code initial default parameters -- typically just set to a literal map.", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"ParamsHistory", &gti.Field{Name: "ParamsHistory", Type: "github.com/emer/emergent/v2/params.HistoryImpl", LocalType: "params.HistoryImpl", Doc: "provides a history of parameters applied to the layer", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.LayerIdxs",
	ShortName: "axon.LayerIdxs",
	IDName:    "layer-idxs",
	Doc:       "LayerIdxs contains index access into network global arrays for GPU.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"layerparams"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"layerparams"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"layerparams"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"LayIdx", &gti.Field{Name: "LayIdx", Type: "uint32", LocalType: "uint32", Doc: "layer index", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"MaxData", &gti.Field{Name: "MaxData", Type: "uint32", LocalType: "uint32", Doc: "maximum number of data parallel elements", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"PoolSt", &gti.Field{Name: "PoolSt", Type: "uint32", LocalType: "uint32", Doc: "start of pools for this layer -- first one is always the layer-wide pool", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NeurSt", &gti.Field{Name: "NeurSt", Type: "uint32", LocalType: "uint32", Doc: "start of neurons for this layer in global array (same as Layer.NeurStIdx)", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NeurN", &gti.Field{Name: "NeurN", Type: "uint32", LocalType: "uint32", Doc: "number of neurons in layer", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"RecvSt", &gti.Field{Name: "RecvSt", Type: "uint32", LocalType: "uint32", Doc: "start index into RecvPrjns global array", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"RecvN", &gti.Field{Name: "RecvN", Type: "uint32", LocalType: "uint32", Doc: "number of recv projections", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"SendSt", &gti.Field{Name: "SendSt", Type: "uint32", LocalType: "uint32", Doc: "start index into RecvPrjns global array", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"SendN", &gti.Field{Name: "SendN", Type: "uint32", LocalType: "uint32", Doc: "number of recv projections", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ExtsSt", &gti.Field{Name: "ExtsSt", Type: "uint32", LocalType: "uint32", Doc: "starting index in network global Exts list of external input for this layer -- only for Input / Target / Compare layer types", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ShpPlY", &gti.Field{Name: "ShpPlY", Type: "int32", LocalType: "int32", Doc: "layer shape Pools Y dimension -- 1 for 2D", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ShpPlX", &gti.Field{Name: "ShpPlX", Type: "int32", LocalType: "int32", Doc: "layer shape Pools X dimension -- 1 for 2D", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ShpUnY", &gti.Field{Name: "ShpUnY", Type: "int32", LocalType: "int32", Doc: "layer shape Units Y dimension", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ShpUnX", &gti.Field{Name: "ShpUnX", Type: "int32", LocalType: "int32", Doc: "layer shape Units X dimension", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.LayerInhibIdxs",
	ShortName:  "axon.LayerInhibIdxs",
	IDName:     "layer-inhib-idxs",
	Doc:        "LayerInhibIdxs contains indexes of layers for between-layer inhibition",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Idx1", &gti.Field{Name: "Idx1", Type: "int32", LocalType: "int32", Doc: "idx of Layer to get layer-level inhibition from -- set during Build from BuildConfig LayInhib1Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Idx2", &gti.Field{Name: "Idx2", Type: "int32", LocalType: "int32", Doc: "idx of Layer to get layer-level inhibition from -- set during Build from BuildConfig LayInhib2Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Idx3", &gti.Field{Name: "Idx3", Type: "int32", LocalType: "int32", Doc: "idx of Layer to get layer-level inhibition from -- set during Build from BuildConfig LayInhib3Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Idx4", &gti.Field{Name: "Idx4", Type: "int32", LocalType: "int32", Doc: "idx of Layer to geta layer-level inhibition from -- set during Build from BuildConfig LayInhib4Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.LayerParams",
	ShortName:  "axon.LayerParams",
	IDName:     "layer-params",
	Doc:        "LayerParams contains all of the layer parameters.\nThese values must remain constant over the course of computation.\nOn the GPU, they are loaded into a uniform.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"LayType", &gti.Field{Name: "LayType", Type: "github.com/emer/axon/axon.LayerTypes", LocalType: "LayerTypes", Doc: "functional type of layer -- determines functional code path for specialized layer types, and is synchronized with the Layer.Typ value", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Acts", &gti.Field{Name: "Acts", Type: "github.com/emer/axon/axon.ActParams", LocalType: "ActParams", Doc: "Activation parameters and methods for computing activations", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"Inhib", &gti.Field{Name: "Inhib", Type: "github.com/emer/axon/axon.InhibParams", LocalType: "InhibParams", Doc: "Inhibition parameters and methods for computing layer-level inhibition", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"LayInhib", &gti.Field{Name: "LayInhib", Type: "github.com/emer/axon/axon.LayerInhibIdxs", LocalType: "LayerInhibIdxs", Doc: "indexes of layers that contribute between-layer inhibition to this layer -- set these indexes via BuildConfig LayInhibXName (X = 1, 2...)", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Learn", &gti.Field{Name: "Learn", Type: "github.com/emer/axon/axon.LearnNeurParams", LocalType: "LearnNeurParams", Doc: "Learning parameters and methods that operate at the neuron level", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"Bursts", &gti.Field{Name: "Bursts", Type: "github.com/emer/axon/axon.BurstParams", LocalType: "BurstParams", Doc: "BurstParams determine how the 5IB Burst activation is computed from CaSpkP integrated spiking values in Super layers -- thresholded.", Directives: gti.Directives{}, Tag: "viewif:\"LayType=SuperLayer\" view:\"inline\""}},
		{"CT", &gti.Field{Name: "CT", Type: "github.com/emer/axon/axon.CTParams", LocalType: "CTParams", Doc: "] params for the CT corticothalamic layer and PTPred layer that generates predictions over the Pulvinar using context -- uses the CtxtGe excitatory input plus stronger NMDA channels to maintain context trace", Directives: gti.Directives{}, Tag: "viewif:\"LayType=[CTLayer,PTPredLayer,PTNotMaintLayer,BLALayer]\" view:\"inline\""}},
		{"Pulv", &gti.Field{Name: "Pulv", Type: "github.com/emer/axon/axon.PulvParams", LocalType: "PulvParams", Doc: "provides parameters for how the plus-phase (outcome) state of Pulvinar thalamic relay cell neurons is computed from the corresponding driver neuron Burst activation (or CaSpkP if not Super)", Directives: gti.Directives{}, Tag: "viewif:\"LayType=PulvinarLayer\" view:\"inline\""}},
		{"Matrix", &gti.Field{Name: "Matrix", Type: "github.com/emer/axon/axon.MatrixParams", LocalType: "MatrixParams", Doc: "parameters for BG Striatum Matrix MSN layers, which are the main Go / NoGo gating units in BG.", Directives: gti.Directives{}, Tag: "viewif:\"LayType=MatrixLayer\" view:\"inline\""}},
		{"GP", &gti.Field{Name: "GP", Type: "github.com/emer/axon/axon.GPParams", LocalType: "GPParams", Doc: "type of GP Layer.", Directives: gti.Directives{}, Tag: "viewif:\"LayType=GPLayer\" view:\"inline\""}},
		{"VSPatch", &gti.Field{Name: "VSPatch", Type: "github.com/emer/axon/axon.VSPatchParams", LocalType: "VSPatchParams", Doc: "parameters for VSPatch learning", Directives: gti.Directives{}, Tag: "viewif:\"LayType=VSPatchLayer\" view:\"inline\""}},
		{"LDT", &gti.Field{Name: "LDT", Type: "github.com/emer/axon/axon.LDTParams", LocalType: "LDTParams", Doc: "parameterizes laterodorsal tegmentum ACh salience neuromodulatory signal, driven by superior colliculus stimulus novelty, US input / absence, and OFC / ACC inhibition", Directives: gti.Directives{}, Tag: "viewif:\"LayType=LDTLayer\" view:\"inline\""}},
		{"VTA", &gti.Field{Name: "VTA", Type: "github.com/emer/axon/axon.VTAParams", LocalType: "VTAParams", Doc: "parameterizes computing overall VTA DA based on LHb PVDA (primary value -- at US time, computed at start of each trial and stored in LHbPVDA global value) and Amygdala (CeM) CS / learned value (LV) activations, which update every cycle.", Directives: gti.Directives{}, Tag: "viewif:\"LayType=VTALayer\" view:\"inline\""}},
		{"RWPred", &gti.Field{Name: "RWPred", Type: "github.com/emer/axon/axon.RWPredParams", LocalType: "RWPredParams", Doc: "parameterizes reward prediction for a simple Rescorla-Wagner learning dynamic (i.e., PV learning in the PVLV framework).", Directives: gti.Directives{}, Tag: "viewif:\"LayType=RWPredLayer\" view:\"inline\""}},
		{"RWDa", &gti.Field{Name: "RWDa", Type: "github.com/emer/axon/axon.RWDaParams", LocalType: "RWDaParams", Doc: "parameterizes reward prediction dopamine for a simple Rescorla-Wagner learning dynamic (i.e., PV learning in the PVLV framework).", Directives: gti.Directives{}, Tag: "viewif:\"LayType=RWDaLayer\" view:\"inline\""}},
		{"TDInteg", &gti.Field{Name: "TDInteg", Type: "github.com/emer/axon/axon.TDIntegParams", LocalType: "TDIntegParams", Doc: "parameterizes TD reward integration layer", Directives: gti.Directives{}, Tag: "viewif:\"LayType=TDIntegLayer\" view:\"inline\""}},
		{"TDDa", &gti.Field{Name: "TDDa", Type: "github.com/emer/axon/axon.TDDaParams", LocalType: "TDDaParams", Doc: "parameterizes dopamine (DA) signal as the temporal difference (TD) between the TDIntegLayer activations in the minus and plus phase.", Directives: gti.Directives{}, Tag: "viewif:\"LayType=TDDaLayer\" view:\"inline\""}},
		{"Idxs", &gti.Field{Name: "Idxs", Type: "github.com/emer/axon/axon.LayerIdxs", LocalType: "LayerIdxs", Doc: "recv and send projection array access info", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.LayerTypes",
	ShortName: "axon.LayerTypes",
	IDName:    "layer-types",
	Doc:       "LayerTypes is an axon-specific layer type enum,\nthat encompasses all the different algorithm types supported.\nClass parameter styles automatically key off of these types.\nThe first entries must be kept synchronized with the emer.LayerType,\nalthough we replace Hidden -> Super.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"layertypes"}},
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.ActAvgVals",
	ShortName: "axon.ActAvgVals",
	IDName:    "act-avg-vals",
	Doc:       "ActAvgVals are long-running-average activation levels stored in the LayerVals,\nfor monitoring and adapting inhibition and possibly scaling parameters.\nAll of these integrate over NData within a network, so are the same across them.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"layervals"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"ActMAvg", &gti.Field{Name: "ActMAvg", Type: "float32", LocalType: "float32", Doc: "running-average minus-phase activity integrated at Dt.LongAvgTau -- used for adapting inhibition relative to target level", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ActPAvg", &gti.Field{Name: "ActPAvg", Type: "float32", LocalType: "float32", Doc: "running-average plus-phase activity integrated at Dt.LongAvgTau", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"AvgMaxGeM", &gti.Field{Name: "AvgMaxGeM", Type: "float32", LocalType: "float32", Doc: "running-average max of minus-phase Ge value across the layer integrated at Dt.LongAvgTau", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"AvgMaxGiM", &gti.Field{Name: "AvgMaxGiM", Type: "float32", LocalType: "float32", Doc: "running-average max of minus-phase Gi value across the layer integrated at Dt.LongAvgTau", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"GiMult", &gti.Field{Name: "GiMult", Type: "float32", LocalType: "float32", Doc: "multiplier on inhibition -- adapted to maintain target activity level", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"AdaptThr", &gti.Field{Name: "AdaptThr", Type: "float32", LocalType: "float32", Doc: "adaptive threshold -- only used for specialized layers, e.g., VSPatch", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.CorSimStats",
	ShortName:  "axon.CorSimStats",
	IDName:     "cor-sim-stats",
	Doc:        "CorSimStats holds correlation similarity (centered cosine aka normalized dot product)\nstatistics at the layer level",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Cor", &gti.Field{Name: "Cor", Type: "float32", LocalType: "float32", Doc: "correlation (centered cosine aka normalized dot product) activation difference between ActP and ActM on this alpha-cycle for this layer -- computed by CorSimFmActs called by PlusPhase", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Avg", &gti.Field{Name: "Avg", Type: "float32", LocalType: "float32", Doc: "running average of correlation similarity between ActP and ActM -- computed with CorSim.Tau time constant in PlusPhase", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Var", &gti.Field{Name: "Var", Type: "float32", LocalType: "float32", Doc: "running variance of correlation similarity between ActP and ActM -- computed with CorSim.Tau time constant in PlusPhase", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.LaySpecialVals",
	ShortName:  "axon.LaySpecialVals",
	IDName:     "lay-special-vals",
	Doc:        "LaySpecialVals holds special values used to communicate to other layers\nbased on neural values, used for special algorithms such as RL where\nsome of the computation is done algorithmically.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"V1", &gti.Field{Name: "V1", Type: "float32", LocalType: "float32", Doc: "one value", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"V2", &gti.Field{Name: "V2", Type: "float32", LocalType: "float32", Doc: "one value", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"V3", &gti.Field{Name: "V3", Type: "float32", LocalType: "float32", Doc: "one value", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"V4", &gti.Field{Name: "V4", Type: "float32", LocalType: "float32", Doc: "one value", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.LayerVals",
	ShortName:  "axon.LayerVals",
	IDName:     "layer-vals",
	Doc:        "LayerVals holds extra layer state that is updated per layer.\nIt is sync'd down from the GPU to the CPU after every Cycle.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"LayIdx", &gti.Field{Name: "LayIdx", Type: "uint32", LocalType: "uint32", Doc: "layer index for these vals", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"DataIdx", &gti.Field{Name: "DataIdx", Type: "uint32", LocalType: "uint32", Doc: "data index for these vals", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RT", &gti.Field{Name: "RT", Type: "float32", LocalType: "float32", Doc: "reaction time for this layer in cycles, which is -1 until the Max CaSpkP level (after MaxCycStart) exceeds the Act.Attn.RTThr threshold", Directives: gti.Directives{}, Tag: "inactive:\"-\""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"ActAvg", &gti.Field{Name: "ActAvg", Type: "github.com/emer/axon/axon.ActAvgVals", LocalType: "ActAvgVals", Doc: "running-average activation levels used for adaptive inhibition, and other adapting values", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"CorSim", &gti.Field{Name: "CorSim", Type: "github.com/emer/axon/axon.CorSimStats", LocalType: "CorSimStats", Doc: "correlation (centered cosine aka normalized dot product) similarity between ActM, ActP states", Directives: gti.Directives{}, Tag: ""}},
		{"Special", &gti.Field{Name: "Special", Type: "github.com/emer/axon/axon.LaySpecialVals", LocalType: "LaySpecialVals", Doc: "special values used to communicate to other layers based on neural values computed on the GPU -- special cross-layer computations happen CPU-side and are sent back into the network via Context on the next cycle -- used for special algorithms such as RL / DA etc", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.CaLrnParams",
	ShortName: "axon.CaLrnParams",
	IDName:    "ca-lrn-params",
	Doc:       "CaLrnParams parameterizes the neuron-level calcium signals driving learning:\nCaLrn = NMDA + VGCC Ca sources, where VGCC can be simulated from spiking or\nuse the more complex and dynamic VGCC channel directly.\nCaLrn is then integrated in a cascading manner at multiple time scales:\nCaM (as in calmodulin), CaP (ltP, CaMKII, plus phase), CaD (ltD, DAPK1, minus phase).",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"learn_neur"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"learn_neur"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"learn_neur"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Norm", &gti.Field{Name: "Norm", Type: "float32", LocalType: "float32", Doc: "denomenator used for normalizing CaLrn, so the max is roughly 1 - 1.5 or so, which works best in terms of previous standard learning rules, and overall learning performance", Directives: gti.Directives{}, Tag: "def:\"80\""}},
		{"SpkVGCC", &gti.Field{Name: "SpkVGCC", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "use spikes to generate VGCC instead of actual VGCC current -- see SpkVGCCa for calcium contribution from each spike", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"SpkVgccCa", &gti.Field{Name: "SpkVgccCa", Type: "float32", LocalType: "float32", Doc: "multiplier on spike for computing Ca contribution to CaLrn in SpkVGCC mode", Directives: gti.Directives{}, Tag: "def:\"35\""}},
		{"VgccTau", &gti.Field{Name: "VgccTau", Type: "float32", LocalType: "float32", Doc: "time constant of decay for VgccCa calcium -- it is highly transient around spikes, so decay and diffusion factors are more important than for long-lasting NMDA factor.  VgccCa is integrated separately int VgccCaInt prior to adding into NMDA Ca in CaLrn", Directives: gti.Directives{}, Tag: "def:\"10\""}},
		{"Dt", &gti.Field{Name: "Dt", Type: "github.com/emer/axon/kinase.CaDtParams", LocalType: "kinase.CaDtParams", Doc: "time constants for integrating CaLrn across M, P and D cascading levels", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"UpdtThr", &gti.Field{Name: "UpdtThr", Type: "float32", LocalType: "float32", Doc: "Threshold on CaSpkP CaSpkD value for updating synapse-level Ca values (SynCa) -- this is purely a performance optimization that excludes random infrequent spikes -- 0.05 works well on larger networks but not smaller, which require the .01 default.", Directives: gti.Directives{}, Tag: "def:\"0.01,0.02,0.5\""}},
		{"VgccDt", &gti.Field{Name: "VgccDt", Type: "float32", LocalType: "float32", Doc: "rate = 1 / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\" inactive:\"+\""}},
		{"NormInv", &gti.Field{Name: "NormInv", Type: "float32", LocalType: "float32", Doc: "= 1 / Norm", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\" inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.CaSpkParams",
	ShortName:  "axon.CaSpkParams",
	IDName:     "ca-spk-params",
	Doc:        "CaSpkParams parameterizes the neuron-level spike-driven calcium\nsignals, starting with CaSyn that is integrated at the neuron level\nand drives synapse-level, pre * post Ca integration, which provides the Tr\ntrace that multiplies error signals, and drives learning directly for Target layers.\nCaSpk* values are integrated separately at the Neuron level and used for UpdtThr\nand RLRate as a proxy for the activation (spiking) based learning signal.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"SpikeG", &gti.Field{Name: "SpikeG", Type: "float32", LocalType: "float32", Doc: "gain multiplier on spike for computing CaSpk: increasing this directly affects the magnitude of the trace values, learning rate in Target layers, and other factors that depend on CaSpk values: RLRate, UpdtThr.  Prjn.KinaseCa.SpikeG provides an additional gain factor specific to the synapse-level trace factors, without affecting neuron-level CaSpk values.  Larger networks require higher gain factors at the neuron level -- 12, vs 8 for smaller.", Directives: gti.Directives{}, Tag: "def:\"8,12\""}},
		{"SynTau", &gti.Field{Name: "SynTau", Type: "float32", LocalType: "float32", Doc: "time constant for integrating spike-driven calcium trace at sender and recv neurons, CaSyn, which then drives synapse-level integration of the joint pre * post synapse-level activity, in cycles (msec).  Note: if this param is changed, then there will be a change in effective learning rate that can be compensated for by multiplying PrjnParams.Learn.KinaseCa.SpikeG by sqrt(30 / sqrt(SynTau)", Directives: gti.Directives{}, Tag: "def:\"30\" min:\"1\""}},
		{"SynDt", &gti.Field{Name: "SynDt", Type: "float32", LocalType: "float32", Doc: "rate = 1 / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\" inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Dt", &gti.Field{Name: "Dt", Type: "github.com/emer/axon/kinase.CaDtParams", LocalType: "kinase.CaDtParams", Doc: "time constants for integrating CaSpk across M, P and D cascading levels -- these are typically the same as in CaLrn and Prjn level for synaptic integration, except for the M factor.", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.TrgAvgActParams",
	ShortName:  "axon.TrgAvgActParams",
	IDName:     "trg-avg-act-params",
	Doc:        "TrgAvgActParams govern the target and actual long-term average activity in neurons.\nTarget value is adapted by neuron-wise error and difference in actual vs. target.\ndrives synaptic scaling at a slow timescale (Network.SlowInterval).",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "whether to use target average activity mechanism to scale synaptic weights", Directives: gti.Directives{}, Tag: ""}},
		{"GiBaseInit", &gti.Field{Name: "GiBaseInit", Type: "float32", LocalType: "float32", Doc: "if this is > 0, then each neuron's GiBase is initialized as this proportion of TrgRange.Max - TrgAvg -- gives neurons differences in intrinsic inhibition / leak as a starting bias", Directives: gti.Directives{}, Tag: ""}},
		{"ErrLRate", &gti.Field{Name: "ErrLRate", Type: "float32", LocalType: "float32", Doc: "learning rate for adjustments to Trg value based on unit-level error signal.  Population TrgAvg values are renormalized to fixed overall average in TrgRange. Generally, deviating from the default doesn't make much difference.", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.02\""}},
		{"SynScaleRate", &gti.Field{Name: "SynScaleRate", Type: "float32", LocalType: "float32", Doc: "rate parameter for how much to scale synaptic weights in proportion to the AvgDif between target and actual proportion activity -- this determines the effective strength of the constraint, and larger models may need more than the weaker default value.", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.005,0.0002\""}},
		{"SubMean", &gti.Field{Name: "SubMean", Type: "float32", LocalType: "float32", Doc: "amount of mean trg change to subtract -- 1 = full zero sum.  1 works best in general -- but in some cases it may be better to start with 0 and then increase using network SetSubMean method at a later point.", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0,1\""}},
		{"Permute", &gti.Field{Name: "Permute", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "permute the order of TrgAvg values within layer -- otherwise they are just assigned in order from highest to lowest for easy visualization -- generally must be true if any topographic weights are being used", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"true\""}},
		{"Pool", &gti.Field{Name: "Pool", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "use pool-level target values if pool-level inhibition and 4D pooled layers are present -- if pool sizes are relatively small, then may not be useful to distribute targets just within pool", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"TrgRange", &gti.Field{Name: "TrgRange", Type: "goki.dev/etable/v2/minmax.F32", LocalType: "minmax.F32", Doc: "range of target normalized average activations -- individual neurons are assigned values within this range to TrgAvg, and clamped within this range.", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"{'Min':0.5,'Max':2}\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.RLRateParams",
	ShortName:  "axon.RLRateParams",
	IDName:     "rl-rate-params",
	Doc:        "RLRateParams are recv neuron learning rate modulation parameters.\nHas two factors: the derivative of the sigmoid based on CaSpkD\nactivity levels, and based on the phase-wise differences in activity (Diff).",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "use learning rate modulation", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"SigmoidMin", &gti.Field{Name: "SigmoidMin", Type: "float32", LocalType: "float32", Doc: "minimum learning rate multiplier for sigmoidal act (1-act) factor -- prevents lrate from going too low for extreme values.  Set to 1 to disable Sigmoid derivative factor, which is default for Target layers.", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.05,1\""}},
		{"Diff", &gti.Field{Name: "Diff", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "modulate learning rate as a function of plus - minus differences", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
		{"SpkThr", &gti.Field{Name: "SpkThr", Type: "float32", LocalType: "float32", Doc: "threshold on Max(CaSpkP, CaSpkD) below which Min lrate applies -- must be > 0 to prevent div by zero", Directives: gti.Directives{}, Tag: "viewif:\"On&&Diff\" def:\"0.1\""}},
		{"DiffThr", &gti.Field{Name: "DiffThr", Type: "float32", LocalType: "float32", Doc: "threshold on recv neuron error delta, i.e., |CaSpkP - CaSpkD| below which lrate is at Min value", Directives: gti.Directives{}, Tag: "viewif:\"On&&Diff\" def:\"0.02\""}},
		{"Min", &gti.Field{Name: "Min", Type: "float32", LocalType: "float32", Doc: "for Diff component, minimum learning rate value when below ActDiffThr", Directives: gti.Directives{}, Tag: "viewif:\"On&&Diff\" def:\"0.001\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.LearnNeurParams",
	ShortName:  "axon.LearnNeurParams",
	IDName:     "learn-neur-params",
	Doc:        "axon.LearnNeurParams manages learning-related parameters at the neuron-level.\nThis is mainly the running average activations that drive learning",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"CaLearn", &gti.Field{Name: "CaLearn", Type: "github.com/emer/axon/axon.CaLrnParams", LocalType: "CaLrnParams", Doc: "parameterizes the neuron-level calcium signals driving learning: CaLrn = NMDA + VGCC Ca sources, where VGCC can be simulated from spiking or use the more complex and dynamic VGCC channel directly.  CaLrn is then integrated in a cascading manner at multiple time scales: CaM (as in calmodulin), CaP (ltP, CaMKII, plus phase), CaD (ltD, DAPK1, minus phase).", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"CaSpk", &gti.Field{Name: "CaSpk", Type: "github.com/emer/axon/axon.CaSpkParams", LocalType: "CaSpkParams", Doc: "parameterizes the neuron-level spike-driven calcium signals, starting with CaSyn that is integrated at the neuron level, and drives synapse-level, pre * post Ca integration, which provides the Tr trace that multiplies error signals, and drives learning directly for Target layers. CaSpk* values are integrated separately at the Neuron level and used for UpdtThr and RLRate as a proxy for the activation (spiking) based learning signal.", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"LrnNMDA", &gti.Field{Name: "LrnNMDA", Type: "github.com/emer/axon/chans.NMDAParams", LocalType: "chans.NMDAParams", Doc: "NMDA channel parameters used for learning, vs. the ones driving activation -- allows exploration of learning parameters independent of their effects on active maintenance contributions of NMDA, and may be supported by different receptor subtypes", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"TrgAvgAct", &gti.Field{Name: "TrgAvgAct", Type: "github.com/emer/axon/axon.TrgAvgActParams", LocalType: "TrgAvgActParams", Doc: "synaptic scaling parameters for regulating overall average activity compared to neuron's own target level", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"RLRate", &gti.Field{Name: "RLRate", Type: "github.com/emer/axon/axon.RLRateParams", LocalType: "RLRateParams", Doc: "recv neuron learning rate modulation params -- an additional error-based modulation of learning for receiver side: RLRate = |CaSpkP - CaSpkD| / Max(CaSpkP, CaSpkD)", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"NeuroMod", &gti.Field{Name: "NeuroMod", Type: "github.com/emer/axon/axon.NeuroModParams", LocalType: "NeuroModParams", Doc: "neuromodulation effects on learning rate and activity, as a function of layer-level DA and ACh values, which are updated from global Context values, and computed from reinforcement learning algorithms", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.SWtInitParams",
	ShortName:  "axon.SWtInitParams",
	IDName:     "s-wt-init-params",
	Doc:        "SWtInitParams for initial SWt values",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"SPct", &gti.Field{Name: "SPct", Type: "float32", LocalType: "float32", Doc: "how much of the initial random weights are captured in the SWt values -- rest goes into the LWt values.  1 gives the strongest initial biasing effect, for larger models that need more structural support. 0.5 should work for most models where stronger constraints are not needed.", Directives: gti.Directives{}, Tag: "min:\"0\" max:\"1\" def:\"0,1,0.5\""}},
		{"Mean", &gti.Field{Name: "Mean", Type: "float32", LocalType: "float32", Doc: "target mean weight values across receiving neuron's projection -- the mean SWt values are constrained to remain at this value.  some projections may benefit from lower mean of .4", Directives: gti.Directives{}, Tag: "def:\"0.5,0.4\""}},
		{"Var", &gti.Field{Name: "Var", Type: "float32", LocalType: "float32", Doc: "initial variance in weight values, prior to constraints.", Directives: gti.Directives{}, Tag: "def:\"0.25\""}},
		{"Sym", &gti.Field{Name: "Sym", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "symmetrize the initial weight values with those in reciprocal projection -- typically true for bidirectional excitatory connections", Directives: gti.Directives{}, Tag: "def:\"true\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.SWtAdaptParams",
	ShortName:  "axon.SWtAdaptParams",
	IDName:     "s-wt-adapt-params",
	Doc:        "SWtAdaptParams manages adaptation of SWt values",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "if true, adaptation is active -- if false, SWt values are not updated, in which case it is generally good to have Init.SPct=0 too.", Directives: gti.Directives{}, Tag: ""}},
		{"LRate", &gti.Field{Name: "LRate", Type: "float32", LocalType: "float32", Doc: "learning rate multiplier on the accumulated DWt values (which already have fast LRate applied) to incorporate into SWt during slow outer loop updating -- lower values impose stronger constraints, for larger networks that need more structural support, e.g., 0.001 is better after 1,000 epochs in large models.  0.1 is fine for smaller models.", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"0.1,0.01,0.001,0.0002\""}},
		{"SubMean", &gti.Field{Name: "SubMean", Type: "float32", LocalType: "float32", Doc: "amount of mean to subtract from SWt delta when updating -- generally best to set to 1", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"1\""}},
		{"SigGain", &gti.Field{Name: "SigGain", Type: "float32", LocalType: "float32", Doc: "gain of sigmoidal constrast enhancement function used to transform learned, linear LWt values into Wt values", Directives: gti.Directives{}, Tag: "viewif:\"On\" def:\"6\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.SWtParams",
	ShortName: "axon.SWtParams",
	IDName:    "s-wt-params",
	Doc:       "SWtParams manages structural, slowly adapting weight values (SWt),\nin terms of initialization and updating over course of learning.\nSWts impose initial and slowly adapting constraints on neuron connectivity\nto encourage differentiation of neuron representations and overall good behavior\nin terms of not hogging the representational space.\nThe TrgAvg activity constraint is not enforced through SWt -- it needs to be\nmore dynamic and supported by the regular learned weights.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"learn"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Init", &gti.Field{Name: "Init", Type: "github.com/emer/axon/axon.SWtInitParams", LocalType: "SWtInitParams", Doc: "initialization of SWt values", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Adapt", &gti.Field{Name: "Adapt", Type: "github.com/emer/axon/axon.SWtAdaptParams", LocalType: "SWtAdaptParams", Doc: "adaptation of SWt values in response to LWt learning", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Limit", &gti.Field{Name: "Limit", Type: "goki.dev/etable/v2/minmax.F32", LocalType: "minmax.F32", Doc: "range limits for SWt values", Directives: gti.Directives{}, Tag: "def:\"{'Min':0.2,'Max':0.8}\" view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.LRateParams",
	ShortName: "axon.LRateParams",
	IDName:    "l-rate-params",
	Doc:       "LRateParams manages learning rate parameters",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"learn"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Base", &gti.Field{Name: "Base", Type: "float32", LocalType: "float32", Doc: "base learning rate for this projection -- can be modulated by other factors below -- for larger networks, use slower rates such as 0.04, smaller networks can use faster 0.2.", Directives: gti.Directives{}, Tag: "def:\"0.04,0.1,0.2\""}},
		{"Sched", &gti.Field{Name: "Sched", Type: "float32", LocalType: "float32", Doc: "scheduled learning rate multiplier, simulating reduction in plasticity over aging", Directives: gti.Directives{}, Tag: ""}},
		{"Mod", &gti.Field{Name: "Mod", Type: "float32", LocalType: "float32", Doc: "dynamic learning rate modulation due to neuromodulatory or other such factors", Directives: gti.Directives{}, Tag: ""}},
		{"Eff", &gti.Field{Name: "Eff", Type: "float32", LocalType: "float32", Doc: "effective actual learning rate multiplier used in computing DWt: Eff = eMod * Sched * Base", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.TraceParams",
	ShortName:  "axon.TraceParams",
	IDName:     "trace-params",
	Doc:        "TraceParams manages learning rate parameters",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Tau", &gti.Field{Name: "Tau", Type: "float32", LocalType: "float32", Doc: "time constant for integrating trace over theta cycle timescales -- governs the decay rate of syanptic trace", Directives: gti.Directives{}, Tag: "def:\"1,2,4\""}},
		{"SubMean", &gti.Field{Name: "SubMean", Type: "float32", LocalType: "float32", Doc: "amount of the mean dWt to subtract, producing a zero-sum effect -- 1.0 = full zero-sum dWt -- only on non-zero DWts.  typically set to 0 for standard trace learning projections, although some require it for stability over the long haul.  can use SetSubMean to set to 1 after significant early learning has occurred with 0.  Some special prjn types (e.g., Hebb) benefit from SubMean = 1 always", Directives: gti.Directives{}, Tag: "def:\"0,1\""}},
		{"LearnThr", &gti.Field{Name: "LearnThr", Type: "float32", LocalType: "float32", Doc: "threshold for learning, depending on different algorithms -- in Matrix and VSPatch it applies to normalized GeIntNorm value -- setting this relatively high encourages sparser representations", Directives: gti.Directives{}, Tag: ""}},
		{"Dt", &gti.Field{Name: "Dt", Type: "float32", LocalType: "float32", Doc: "rate = 1 / tau", Directives: gti.Directives{}, Tag: "view:\"-\" json:\"-\" xml:\"-\" inactive:\"+\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.LRateMod",
	ShortName:  "axon.LRateMod",
	IDName:     "l-rate-mod",
	Doc:        "LRateMod implements global learning rate modulation, based on a performance-based\nfactor, for example error.  Increasing levels of the factor = higher learning rate.\nThis can be added to a Sim and called prior to DWt() to dynamically change lrate\nbased on overall network performance.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"On", &gti.Field{Name: "On", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "toggle use of this modulation factor", Directives: gti.Directives{}, Tag: ""}},
		{"Base", &gti.Field{Name: "Base", Type: "float32", LocalType: "float32", Doc: "baseline learning rate -- what you get for correct cases", Directives: gti.Directives{}, Tag: "viewif:\"On\" min:\"0\" max:\"1\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Range", &gti.Field{Name: "Range", Type: "goki.dev/etable/v2/minmax.F32", LocalType: "minmax.F32", Doc: "defines the range over which modulation occurs for the modulator factor -- Min and below get the Base level of learning rate modulation, Max and above get a modulation of 1", Directives: gti.Directives{}, Tag: "viewif:\"On\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.LearnSynParams",
	ShortName: "axon.LearnSynParams",
	IDName:    "learn-syn-params",
	Doc:       "LearnSynParams manages learning-related parameters at the synapse-level.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"learn"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Learn", &gti.Field{Name: "Learn", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "enable learning for this projection", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"LRate", &gti.Field{Name: "LRate", Type: "github.com/emer/axon/axon.LRateParams", LocalType: "LRateParams", Doc: "learning rate parameters, supporting two levels of modulation on top of base learning rate.", Directives: gti.Directives{}, Tag: "viewif:\"Learn\""}},
		{"Trace", &gti.Field{Name: "Trace", Type: "github.com/emer/axon/axon.TraceParams", LocalType: "TraceParams", Doc: "trace-based learning parameters", Directives: gti.Directives{}, Tag: "viewif:\"Learn\""}},
		{"KinaseCa", &gti.Field{Name: "KinaseCa", Type: "github.com/emer/axon/kinase.CaParams", LocalType: "kinase.CaParams", Doc: "kinase calcium Ca integration parameters", Directives: gti.Directives{}, Tag: "viewif:\"Learn\" view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.Network",
	ShortName:  "axon.Network",
	IDName:     "network",
	Doc:        "axon.Network implements the Axon spiking model,\nbuilding on the algorithm-independent NetworkBase that manages\nall the infrastructure.",
	Directives: gti.Directives{},
	Fields:     ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NetworkBase", &gti.Field{Name: "NetworkBase", Type: "github.com/emer/axon/axon.NetworkBase", LocalType: "NetworkBase", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.NetworkBase",
	ShortName:  "axon.NetworkBase",
	IDName:     "network-base",
	Doc:        "NetworkBase manages the basic structural components of a network (layers).\nThe main Network then can just have the algorithm-specific code.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"EmerNet", &gti.Field{Name: "EmerNet", Type: "github.com/emer/emergent/v2/emer.Network", LocalType: "emer.Network", Doc: "we need a pointer to ourselves as an emer.Network, which can always be used to extract the true underlying type of object when network is embedded in other structs -- function receivers do not have this ability so this is necessary.", Directives: gti.Directives{}, Tag: "copy:\"-\" json:\"-\" xml:\"-\" view:\"-\""}},
		{"Nm", &gti.Field{Name: "Nm", Type: "string", LocalType: "string", Doc: "overall name of network -- helps discriminate if there are multiple", Directives: gti.Directives{}, Tag: ""}},
		{"WtsFile", &gti.Field{Name: "WtsFile", Type: "string", LocalType: "string", Doc: "filename of last weights file loaded or saved", Directives: gti.Directives{}, Tag: ""}},
		{"PVLV", &gti.Field{Name: "PVLV", Type: "github.com/emer/axon/axon.PVLV", LocalType: "PVLV", Doc: "PVLV system for phasic dopamine signaling, including internal drives, US outcomes.  Core LHb (lateral habenula) and VTA (ventral tegmental area) dopamine are computed in equations using inputs from specialized network layers (LDTLayer driven by BLA, CeM layers, VSPatchLayer).  Renders USLayer, PVLayer, DrivesLayer representations based on state updated here.", Directives: gti.Directives{}, Tag: ""}},
		{"LayMap", &gti.Field{Name: "LayMap", Type: "map[string]*github.com/emer/axon/axon.Layer", LocalType: "map[string]*Layer", Doc: "map of name to layers -- layer names must be unique", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"LayClassMap", &gti.Field{Name: "LayClassMap", Type: "map[string][]string", LocalType: "map[string][]string", Doc: "map of layer classes -- made during Build", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"MinPos", &gti.Field{Name: "MinPos", Type: "goki.dev/mat32/v2.Vec3", LocalType: "mat32.Vec3", Doc: "minimum display position in network", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"MaxPos", &gti.Field{Name: "MaxPos", Type: "goki.dev/mat32/v2.Vec3", LocalType: "mat32.Vec3", Doc: "maximum display position in network", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"MetaData", &gti.Field{Name: "MetaData", Type: "map[string]string", LocalType: "map[string]string", Doc: "optional metadata that is saved in network weights files -- e.g., can indicate number of epochs that were trained, or any other information about this network that would be useful to save", Directives: gti.Directives{}, Tag: ""}},
		{"UseGPUOrder", &gti.Field{Name: "UseGPUOrder", Type: "bool", LocalType: "bool", Doc: "if true, the neuron and synapse variables will be organized into a gpu-optimized memory order, otherwise cpu-optimized. This must be set before network Build() is called.", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NetIdx", &gti.Field{Name: "NetIdx", Type: "uint32", LocalType: "uint32", Doc: "network index in global Networks list of networks -- needed for GPU shader kernel compatible network variable access functions (e.g., NrnV, SynV etc) in CPU mode", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"MaxDelay", &gti.Field{Name: "MaxDelay", Type: "uint32", LocalType: "uint32", Doc: "maximum synaptic delay across any projection in the network -- used for sizing the GBuf accumulation buffer.", Directives: gti.Directives{}, Tag: "inactive:\"+\" view:\"-\""}},
		{"MaxData", &gti.Field{Name: "MaxData", Type: "uint32", LocalType: "uint32", Doc: "maximum number of data inputs that can be processed in parallel in one pass of the network. Neuron storage is allocated to hold this amount during Build process, and this value reflects that.", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NNeurons", &gti.Field{Name: "NNeurons", Type: "uint32", LocalType: "uint32", Doc: "total number of neurons", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NSyns", &gti.Field{Name: "NSyns", Type: "uint32", LocalType: "uint32", Doc: "total number of synapses", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Globals", &gti.Field{Name: "Globals", Type: "[]float32", LocalType: "[]float32", Doc: "storage for global vars", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Layers", &gti.Field{Name: "Layers", Type: "[]*github.com/emer/axon/axon.Layer", LocalType: "[]*Layer", Doc: "array of layers", Directives: gti.Directives{}, Tag: ""}},
		{"LayParams", &gti.Field{Name: "LayParams", Type: "[]github.com/emer/axon/axon.LayerParams", LocalType: "[]LayerParams", Doc: "array of layer parameters, in 1-to-1 correspondence with Layers", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"LayVals", &gti.Field{Name: "LayVals", Type: "[]github.com/emer/axon/axon.LayerVals", LocalType: "[]LayerVals", Doc: "array of layer values, with extra per data", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Pools", &gti.Field{Name: "Pools", Type: "[]github.com/emer/axon/axon.Pool", LocalType: "[]Pool", Doc: "array of inhibitory pools for all layers.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Neurons", &gti.Field{Name: "Neurons", Type: "[]float32", LocalType: "[]float32", Doc: "entire network's allocation of neuron variables, accessed via NrnV function with flexible striding", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"NeuronAvgs", &gti.Field{Name: "NeuronAvgs", Type: "[]float32", LocalType: "[]float32", Doc: "] entire network's allocation of neuron average avariables, accessed via NrnAvgV function with flexible striding", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"NeuronIxs", &gti.Field{Name: "NeuronIxs", Type: "[]uint32", LocalType: "[]uint32", Doc: "entire network's allocation of neuron index variables, accessed via NrnI function with flexible striding", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Prjns", &gti.Field{Name: "Prjns", Type: "[]*github.com/emer/axon/axon.Prjn", LocalType: "[]*Prjn", Doc: "pointers to all projections in the network, sender-based", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"PrjnParams", &gti.Field{Name: "PrjnParams", Type: "[]github.com/emer/axon/axon.PrjnParams", LocalType: "[]PrjnParams", Doc: "array of projection parameters, in 1-to-1 correspondence with Prjns, sender-based", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseIxs", &gti.Field{Name: "SynapseIxs", Type: "[]uint32", LocalType: "[]uint32", Doc: "entire network's allocation of synapse idx vars, organized sender-based, with flexible striding, accessed via SynI function", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Synapses", &gti.Field{Name: "Synapses", Type: "[]float32", LocalType: "[]float32", Doc: "entire network's allocation of synapses, organized sender-based, with flexible striding, accessed via SynV function", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SynapseCas", &gti.Field{Name: "SynapseCas", Type: "[]float32", LocalType: "[]float32", Doc: "entire network's allocation of synapse Ca vars, organized sender-based, with flexible striding, accessed via SynCaV function", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"PrjnSendCon", &gti.Field{Name: "PrjnSendCon", Type: "[]github.com/emer/axon/axon.StartN", LocalType: "[]StartN", Doc: "starting offset and N cons for each sending neuron, for indexing into the Syns synapses, which are organized sender-based.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"PrjnRecvCon", &gti.Field{Name: "PrjnRecvCon", Type: "[]github.com/emer/axon/axon.StartN", LocalType: "[]StartN", Doc: "starting offset and N cons for each recv neuron, for indexing into the RecvSynIdx array of indexes into the Syns synapses, which are organized sender-based.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"PrjnGBuf", &gti.Field{Name: "PrjnGBuf", Type: "[]int32", LocalType: "[]int32", Doc: "conductance buffer for accumulating spikes -- subslices are allocated to each projection -- uses int-encoded float values for faster GPU atomic integration", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"PrjnGSyns", &gti.Field{Name: "PrjnGSyns", Type: "[]float32", LocalType: "[]float32", Doc: "synaptic conductance integrated over time per projection per recv neurons -- spikes come in via PrjnBuf -- subslices are allocated to each projection", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RecvPrjnIdxs", &gti.Field{Name: "RecvPrjnIdxs", Type: "[]uint32", LocalType: "[]uint32", Doc: "indexes into Prjns (organized by SendPrjn) organized by recv projections -- needed for iterating through recv prjns efficiently on GPU.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RecvSynIdxs", &gti.Field{Name: "RecvSynIdxs", Type: "[]uint32", LocalType: "[]uint32", Doc: "indexes into Synapses for each recv neuron, organized into blocks according to PrjnRecvCon, for receiver-based access.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Exts", &gti.Field{Name: "Exts", Type: "[]float32", LocalType: "[]float32", Doc: "external input values for all Input / Target / Compare layers in the network -- the ApplyExt methods write to this per layer, and it is then actually applied in one consistent method.", Directives: gti.Directives{}, Tag: ""}},
		{"Ctx", &gti.Field{Name: "Ctx", Type: "github.com/emer/axon/axon.Context", LocalType: "Context", Doc: "context used only for accessing neurons for display -- NetIdxs.NData in here is copied from active context in NewState", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Rand", &gti.Field{Name: "Rand", Type: "github.com/emer/emergent/v2/erand.SysRand", LocalType: "erand.SysRand", Doc: "random number generator for the network -- all random calls must use this -- set seed here for weight initialization values", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RndSeed", &gti.Field{Name: "RndSeed", Type: "int64", LocalType: "int64", Doc: "random seed to be set at the start of configuring the network and initializing the weights -- set this to get a different set of weights", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NThreads", &gti.Field{Name: "NThreads", Type: "int", LocalType: "int", Doc: "number of threads to use for parallel processing", Directives: gti.Directives{}, Tag: ""}},
		{"GPU", &gti.Field{Name: "GPU", Type: "github.com/emer/axon/axon.GPU", LocalType: "GPU", Doc: "GPU implementation", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"RecFunTimes", &gti.Field{Name: "RecFunTimes", Type: "bool", LocalType: "bool", Doc: "record function timer information", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"FunTimes", &gti.Field{Name: "FunTimes", Type: "map[string]*github.com/emer/emergent/v2/timer.Time", LocalType: "map[string]*timer.Time", Doc: "timers for each major function (step of processing)", Directives: gti.Directives{}, Tag: "view:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.DAModTypes",
	ShortName: "axon.DAModTypes",
	IDName:    "da-mod-types",
	Doc:       "DAModTypes are types of dopamine modulation of neural activity.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"neuromod"}},
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.ValenceTypes",
	ShortName: "axon.ValenceTypes",
	IDName:    "valence-types",
	Doc:       "ValenceTypes are types of valence coding: positive or negative.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.NeuroModParams",
	ShortName:  "axon.NeuroModParams",
	IDName:     "neuro-mod-params",
	Doc:        "NeuroModParams specifies the effects of neuromodulators on neural\nactivity and learning rate.  These can apply to any neuron type,\nand are applied in the core cycle update equations.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"DAMod", &gti.Field{Name: "DAMod", Type: "github.com/emer/axon/axon.DAModTypes", LocalType: "DAModTypes", Doc: "dopamine receptor-based effects of dopamine modulation on excitatory and inhibitory conductances: D1 is excitatory, D2 is inhibitory as a function of increasing dopamine", Directives: gti.Directives{}, Tag: ""}},
		{"Valence", &gti.Field{Name: "Valence", Type: "github.com/emer/axon/axon.ValenceTypes", LocalType: "ValenceTypes", Doc: "valence coding of this layer -- may affect specific layer types but does not directly affect neuromodulators currently", Directives: gti.Directives{}, Tag: ""}},
		{"DAModGain", &gti.Field{Name: "DAModGain", Type: "float32", LocalType: "float32", Doc: "multiplicative factor on overall DA modulation specified by DAMod -- resulting overall gain factor is: 1 + DAModGain * DA, where DA is appropriate DA-driven factor", Directives: gti.Directives{}, Tag: "viewif:\"DAMod!=NoDAMod\""}},
		{"DALRateSign", &gti.Field{Name: "DALRateSign", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "modulate the sign of the learning rate factor according to the DA sign, taking into account the DAMod sign reversal for D2Mod, also using BurstGain and DipGain to modulate DA value -- otherwise, only the magnitude of the learning rate is modulated as a function of raw DA magnitude according to DALRateMod (without additional gain factors)", Directives: gti.Directives{}, Tag: ""}},
		{"DALRateMod", &gti.Field{Name: "DALRateMod", Type: "float32", LocalType: "float32", Doc: "if not using DALRateSign, this is the proportion of maximum learning rate that Abs(DA) magnitude can modulate -- e.g., if 0.2, then DA = 0 = 80% of std learning rate, 1 = 100%", Directives: gti.Directives{}, Tag: "min:\"0\" max:\"1\" viewif:\"!DALRateSign\""}},
		{"AChLRateMod", &gti.Field{Name: "AChLRateMod", Type: "float32", LocalType: "float32", Doc: "proportion of maximum learning rate that ACh can modulate -- e.g., if 0.2, then ACh = 0 = 80% of std learning rate, 1 = 100%", Directives: gti.Directives{}, Tag: "min:\"0\" max:\"1\""}},
		{"AChDisInhib", &gti.Field{Name: "AChDisInhib", Type: "float32", LocalType: "float32", Doc: "amount of extra Gi inhibition added in proportion to 1 - ACh level -- makes ACh disinhibitory", Directives: gti.Directives{}, Tag: "min:\"0\" def:\"0,5\""}},
		{"BurstGain", &gti.Field{Name: "BurstGain", Type: "float32", LocalType: "float32", Doc: "multiplicative gain factor applied to positive dopamine signals -- this operates on the raw dopamine signal prior to any effect of D2 receptors in reversing its sign!", Directives: gti.Directives{}, Tag: "min:\"0\" def:\"1\""}},
		{"DipGain", &gti.Field{Name: "DipGain", Type: "float32", LocalType: "float32", Doc: "multiplicative gain factor applied to negative dopamine signals -- this operates on the raw dopamine signal prior to any effect of D2 receptors in reversing its sign! should be small for acq, but roughly equal to burst for ext", Directives: gti.Directives{}, Tag: "min:\"0\" def:\"1\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.NeuronFlags",
	ShortName: "axon.NeuronFlags",
	IDName:    "neuron-flags",
	Doc:       "NeuronFlags are bit-flags encoding relevant binary state for neurons",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"neuron"}},
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.NeuronVars",
	ShortName: "axon.NeuronVars",
	IDName:    "neuron-vars",
	Doc:       "NeuronVars are the neuron variables representing current active state,\nspecific to each input data state.\nSee NeuronAvgVars for vars shared across data.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.NeuronAvgVars",
	ShortName: "axon.NeuronAvgVars",
	IDName:    "neuron-avg-vars",
	Doc:       "NeuronAvgVars are mostly neuron variables involved in longer-term average activity\nwhich is aggregated over time and not specific to each input data state,\nalong with any other state that is not input data specific.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.NeuronIdxs",
	ShortName: "axon.NeuronIdxs",
	IDName:    "neuron-idxs",
	Doc:       "NeuronIdxs are the neuron indexes and other uint32 values.\nThere is only one of these per neuron -- not data parallel.\nnote: Flags are encoded in Vars because they are data parallel and\nwritable, whereas indexes are read-only.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.NeuronVarStrides",
	ShortName: "axon.NeuronVarStrides",
	IDName:    "neuron-var-strides",
	Doc:       "NeuronVarStrides encodes the stride offsets for neuron variable access\ninto network float32 array.  Data is always the inner-most variable.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"neuron"}},
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"neuron"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"neuron"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"neuron"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Neuron", &gti.Field{Name: "Neuron", Type: "uint32", LocalType: "uint32", Doc: "neuron level", Directives: gti.Directives{}, Tag: ""}},
		{"Var", &gti.Field{Name: "Var", Type: "uint32", LocalType: "uint32", Doc: "variable level", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.NeuronAvgVarStrides",
	ShortName:  "axon.NeuronAvgVarStrides",
	IDName:     "neuron-avg-var-strides",
	Doc:        "NeuronAvgVarStrides encodes the stride offsets for neuron variable access\ninto network float32 array.  Data is always the inner-most variable.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Neuron", &gti.Field{Name: "Neuron", Type: "uint32", LocalType: "uint32", Doc: "neuron level", Directives: gti.Directives{}, Tag: ""}},
		{"Var", &gti.Field{Name: "Var", Type: "uint32", LocalType: "uint32", Doc: "variable level", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.NeuronIdxStrides",
	ShortName:  "axon.NeuronIdxStrides",
	IDName:     "neuron-idx-strides",
	Doc:        "NeuronIdxStrides encodes the stride offsets for neuron index access\ninto network uint32 array.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Neuron", &gti.Field{Name: "Neuron", Type: "uint32", LocalType: "uint32", Doc: "neuron level", Directives: gti.Directives{}, Tag: ""}},
		{"Index", &gti.Field{Name: "Index", Type: "uint32", LocalType: "uint32", Doc: "index value level", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.MatrixParams",
	ShortName: "axon.MatrixParams",
	IDName:    "matrix-params",
	Doc:       "MatrixParams has parameters for BG Striatum Matrix MSN layers\nThese are the main Go / NoGo gating units in BG.\nDA, ACh learning rate modulation is pre-computed on the recv neuron\nRLRate variable via NeuroMod.  Also uses Pool.Gated for InvertNoGate,\nupdated in PlusPhase prior to DWt call.\nMust set Learn.NeuroMod.DAMod = D1Mod or D2Mod via SetBuildConfig(\"DAMod\").",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"pcore_layers"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"GateThr", &gti.Field{Name: "GateThr", Type: "float32", LocalType: "float32", Doc: "threshold on layer Avg SpkMax for Matrix Go and VThal layers to count as having gated", Directives: gti.Directives{}, Tag: "def:\"0.05\""}},
		{"IsVS", &gti.Field{Name: "IsVS", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "is this a ventral striatum (VS) matrix layer?  if true, the gating status of this layer is recorded in the Global state, and used for updating effort and other factors.", Directives: gti.Directives{}, Tag: ""}},
		{"OtherMatrixIdx", &gti.Field{Name: "OtherMatrixIdx", Type: "int32", LocalType: "int32", Doc: "index of other matrix (Go if we are NoGo and vice-versa).    Set during Build from BuildConfig OtherMatrixName", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ThalLay1Idx", &gti.Field{Name: "ThalLay1Idx", Type: "int32", LocalType: "int32", Doc: "index of thalamus layer that we gate.  needed to get gating information.  Set during Build from BuildConfig ThalLay1Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ThalLay2Idx", &gti.Field{Name: "ThalLay2Idx", Type: "int32", LocalType: "int32", Doc: "index of thalamus layer that we gate.  needed to get gating information.  Set during Build from BuildConfig ThalLay2Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ThalLay3Idx", &gti.Field{Name: "ThalLay3Idx", Type: "int32", LocalType: "int32", Doc: "index of thalamus layer that we gate.  needed to get gating information.  Set during Build from BuildConfig ThalLay3Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ThalLay4Idx", &gti.Field{Name: "ThalLay4Idx", Type: "int32", LocalType: "int32", Doc: "index of thalamus layer that we gate.  needed to get gating information.  Set during Build from BuildConfig ThalLay4Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ThalLay5Idx", &gti.Field{Name: "ThalLay5Idx", Type: "int32", LocalType: "int32", Doc: "index of thalamus layer that we gate.  needed to get gating information.  Set during Build from BuildConfig ThalLay5Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"ThalLay6Idx", &gti.Field{Name: "ThalLay6Idx", Type: "int32", LocalType: "int32", Doc: "index of thalamus layer that we gate.  needed to get gating information.  Set during Build from BuildConfig ThalLay6Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.GPLayerTypes",
	ShortName: "axon.GPLayerTypes",
	IDName:    "gp-layer-types",
	Doc:       "GPLayerTypes is a GPLayer axon-specific layer type enum.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.GPParams",
	ShortName:  "axon.GPParams",
	IDName:     "gp-params",
	Doc:        "GPLayer represents a globus pallidus layer, including:\nGPeOut, GPeIn, GPeTA (arkypallidal), and GPi (see GPType for type).\nTypically just a single unit per Pool representing a given stripe.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"GPType", &gti.Field{Name: "GPType", Type: "github.com/emer/axon/axon.GPLayerTypes", LocalType: "GPLayerTypes", Doc: "type of GP Layer -- must set during config using SetBuildConfig of GPType.", Directives: gti.Directives{}, Tag: "viewif:\"LayType=GPLayer\" view:\"inline\""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.MatrixPrjnParams",
	ShortName: "axon.MatrixPrjnParams",
	IDName:    "matrix-prjn-params",
	Doc:       "MatrixPrjnParams for trace-based learning in the MatrixPrjn.\nA trace of synaptic co-activity is formed, and then modulated by dopamine\nwhenever it occurs.  This bridges the temporal gap between gating activity\nand subsequent activity, and is based biologically on synaptic tags.\nTrace is applied to DWt and reset at the time of reward.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"pcore_prjns"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NoGateLRate", &gti.Field{Name: "NoGateLRate", Type: "float32", LocalType: "float32", Doc: "learning rate for when ACh was elevated but no gating took place, in proportion to the level of ACh that indicates the salience of the event.  A low level of this learning prevents the highly maladaptive situation where the BG is not gating and thus no learning can occur.", Directives: gti.Directives{}, Tag: "def:\"1\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.AvgMaxPhases",
	ShortName: "axon.AvgMaxPhases",
	IDName:    "avg-max-phases",
	Doc:       "AvgMaxPhases contains the average and maximum values over a Pool of neurons,\nat different time scales within a standard ThetaCycle of updating.\nIt is much more efficient on the GPU to just grab everything in one pass at\nthe cycle level, and then take snapshots from there.\nAll of the cycle level values are updated at the *start* of the cycle\nbased on values from the prior cycle -- thus are 1 cycle behind in general.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"pool"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"pool"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"pool"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Cycle", &gti.Field{Name: "Cycle", Type: "github.com/emer/axon/axon.AvgMaxI32", LocalType: "AvgMaxI32", Doc: "updated every cycle -- this is the source of all subsequent time scales", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Minus", &gti.Field{Name: "Minus", Type: "github.com/emer/axon/axon.AvgMaxI32", LocalType: "AvgMaxI32", Doc: "at the end of the minus phase", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Plus", &gti.Field{Name: "Plus", Type: "github.com/emer/axon/axon.AvgMaxI32", LocalType: "AvgMaxI32", Doc: "at the end of the plus phase", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"Prev", &gti.Field{Name: "Prev", Type: "github.com/emer/axon/axon.AvgMaxI32", LocalType: "AvgMaxI32", Doc: "at the end of the previous plus phase", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.PoolAvgMax",
	ShortName:  "axon.PoolAvgMax",
	IDName:     "pool-avg-max",
	Doc:        "PoolAvgMax contains the average and maximum values over a Pool of neurons\nfor different variables of interest, at Cycle, Minus and Plus phase timescales.\nAll of the cycle level values are updated at the *start* of the cycle\nbased on values from the prior cycle -- thus are 1 cycle behind in general.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"CaSpkP", &gti.Field{Name: "CaSpkP", Type: "github.com/emer/axon/axon.AvgMaxPhases", LocalType: "AvgMaxPhases", Doc: "avg and maximum CaSpkP (continuously updated at roughly 40 msec integration window timescale, ends up capturing potentiation, plus-phase signal) -- this is the primary variable to use for tracking overall pool activity", Directives: gti.Directives{}, Tag: "inactive:\"+\" view:\"inline\""}},
		{"CaSpkD", &gti.Field{Name: "CaSpkD", Type: "github.com/emer/axon/axon.AvgMaxPhases", LocalType: "AvgMaxPhases", Doc: "avg and maximum CaSpkD longer-term depression / DAPK1 signal in layer", Directives: gti.Directives{}, Tag: "inactive:\"+\" view:\"inline\""}},
		{"SpkMax", &gti.Field{Name: "SpkMax", Type: "github.com/emer/axon/axon.AvgMaxPhases", LocalType: "AvgMaxPhases", Doc: "avg and maximum SpkMax value (based on CaSpkP) -- reflects peak activity at any point across the cycle", Directives: gti.Directives{}, Tag: "inactive:\"+\" view:\"inline\""}},
		{"Act", &gti.Field{Name: "Act", Type: "github.com/emer/axon/axon.AvgMaxPhases", LocalType: "AvgMaxPhases", Doc: "avg and maximum Act firing rate value", Directives: gti.Directives{}, Tag: "inactive:\"+\" view:\"inline\""}},
		{"GeInt", &gti.Field{Name: "GeInt", Type: "github.com/emer/axon/axon.AvgMaxPhases", LocalType: "AvgMaxPhases", Doc: "avg and maximum GeInt integrated running-average excitatory conductance value", Directives: gti.Directives{}, Tag: "inactive:\"+\" view:\"inline\""}},
		{"GiInt", &gti.Field{Name: "GiInt", Type: "github.com/emer/axon/axon.AvgMaxPhases", LocalType: "AvgMaxPhases", Doc: "avg and maximum GiInt integrated running-average inhibitory conductance value", Directives: gti.Directives{}, Tag: "inactive:\"+\" view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.Pool",
	ShortName: "axon.Pool",
	IDName:    "pool",
	Doc:       "Pool contains computed values for FS-FFFB inhibition,\nand various other state values for layers\nand pools (unit groups) that can be subject to inhibition",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"pool"}},
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"pool"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"pool"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"pool"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"StIdx", &gti.Field{Name: "StIdx", Type: "uint32", LocalType: "uint32", Doc: "starting and ending (exlusive) layer-wise indexes for the list of neurons in this pool", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"LayIdx", &gti.Field{Name: "LayIdx", Type: "uint32", LocalType: "uint32", Doc: "layer index in global layer list", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"DataIdx", &gti.Field{Name: "DataIdx", Type: "uint32", LocalType: "uint32", Doc: "data parallel index (innermost index per layer)", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"PoolIdx", &gti.Field{Name: "PoolIdx", Type: "uint32", LocalType: "uint32", Doc: "pool index in global pool list:", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"IsLayPool", &gti.Field{Name: "IsLayPool", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "is this a layer-wide pool?  if not, it represents a sub-pool of units within a 4D layer", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Gated", &gti.Field{Name: "Gated", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "for special types where relevant (e.g., MatrixLayer, BGThalLayer), indicates if the pool was gated", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Inhib", &gti.Field{Name: "Inhib", Type: "github.com/emer/axon/fsfffb.Inhib", LocalType: "fsfffb.Inhib", Doc: "fast-slow FFFB inhibition values", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"AvgMax", &gti.Field{Name: "AvgMax", Type: "github.com/emer/axon/axon.PoolAvgMax", LocalType: "PoolAvgMax", Doc: "average and max values for relevant variables in this pool, at different time scales", Directives: gti.Directives{}, Tag: ""}},
		{"AvgDif", &gti.Field{Name: "AvgDif", Type: "github.com/emer/axon/axon.AvgMaxI32", LocalType: "AvgMaxI32", Doc: "absolute value of AvgDif differences from actual neuron ActPct relative to TrgAvg", Directives: gti.Directives{}, Tag: "inactive:\"+\" view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.Prjn",
	ShortName:  "axon.Prjn",
	IDName:     "prjn",
	Doc:        "axon.Prjn is a basic Axon projection with synaptic learning parameters",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Params", &gti.Field{Name: "Params", Type: "*github.com/emer/axon/axon.PrjnParams", LocalType: "*PrjnParams", Doc: "all prjn-level parameters -- these must remain constant once configured", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"PrjnBase", &gti.Field{Name: "PrjnBase", Type: "github.com/emer/axon/axon.PrjnBase", LocalType: "PrjnBase", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.PrjnBase",
	ShortName:  "axon.PrjnBase",
	IDName:     "prjn-base",
	Doc:        "PrjnBase contains the basic structural information for specifying a projection of synaptic\nconnections between two layers, and maintaining all the synaptic connection-level data.\nThe same struct token is added to the Recv and Send layer prjn lists, and it manages everything\nabout the connectivity, and methods on the Prjn handle all the relevant computation.\nThe Base does not have algorithm-specific methods and parameters, so it can be easily\nreused for different algorithms, and cleanly separates the algorithm-specific code.\nAny dependency on the algorithm-level Prjn can be captured in the AxonPrjn interface,\naccessed via the AxonPrj field.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"AxonPrj", &gti.Field{Name: "AxonPrj", Type: "github.com/emer/axon/axon.AxonPrjn", LocalType: "AxonPrjn", Doc: "we need a pointer to ourselves as an AxonPrjn, which can always be used to extract the true underlying type of object when prjn is embedded in other structs -- function receivers do not have this ability so this is necessary.", Directives: gti.Directives{}, Tag: "copy:\"-\" json:\"-\" xml:\"-\" view:\"-\""}},
		{"Off", &gti.Field{Name: "Off", Type: "bool", LocalType: "bool", Doc: "inactivate this projection -- allows for easy experimentation", Directives: gti.Directives{}, Tag: ""}},
		{"Cls", &gti.Field{Name: "Cls", Type: "string", LocalType: "string", Doc: "Class is for applying parameter styles, can be space separated multple tags", Directives: gti.Directives{}, Tag: ""}},
		{"Notes", &gti.Field{Name: "Notes", Type: "string", LocalType: "string", Doc: "can record notes about this projection here", Directives: gti.Directives{}, Tag: ""}},
		{"Send", &gti.Field{Name: "Send", Type: "*github.com/emer/axon/axon.Layer", LocalType: "*Layer", Doc: "sending layer for this projection", Directives: gti.Directives{}, Tag: ""}},
		{"Recv", &gti.Field{Name: "Recv", Type: "*github.com/emer/axon/axon.Layer", LocalType: "*Layer", Doc: "receiving layer for this projection", Directives: gti.Directives{}, Tag: ""}},
		{"Pat", &gti.Field{Name: "Pat", Type: "github.com/emer/emergent/v2/prjn.Pattern", LocalType: "prjn.Pattern", Doc: "pattern of connectivity", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"Typ", &gti.Field{Name: "Typ", Type: "github.com/emer/axon/axon.PrjnTypes", LocalType: "PrjnTypes", Doc: "type of projection -- Forward, Back, Lateral, or extended type in specialized algorithms -- matches against .Cls parameter styles (e.g., .Back etc)", Directives: gti.Directives{}, Tag: ""}},
		{"DefParams", &gti.Field{Name: "DefParams", Type: "github.com/emer/emergent/v2/params.Params", LocalType: "params.Params", Doc: "default parameters that are applied prior to user-set parameters -- these are useful for specific functionality in specialized brain areas (e.g., PVLV, BG etc) not associated with a prjn type, which otherwise is used to hard-code initial default parameters -- typically just set to a literal map.", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"ParamsHistory", &gti.Field{Name: "ParamsHistory", Type: "github.com/emer/emergent/v2/params.HistoryImpl", LocalType: "params.HistoryImpl", Doc: "provides a history of parameters applied to the layer", Directives: gti.Directives{}, Tag: "tableview:\"-\""}},
		{"RecvConNAvgMax", &gti.Field{Name: "RecvConNAvgMax", Type: "goki.dev/etable/v2/minmax.AvgMax32", LocalType: "minmax.AvgMax32", Doc: "average and maximum number of recv connections in the receiving layer", Directives: gti.Directives{}, Tag: "tableview:\"-\" inactive:\"+\" view:\"inline\""}},
		{"SendConNAvgMax", &gti.Field{Name: "SendConNAvgMax", Type: "goki.dev/etable/v2/minmax.AvgMax32", LocalType: "minmax.AvgMax32", Doc: "average and maximum number of sending connections in the sending layer", Directives: gti.Directives{}, Tag: "tableview:\"-\" inactive:\"+\" view:\"inline\""}},
		{"SynStIdx", &gti.Field{Name: "SynStIdx", Type: "uint32", LocalType: "uint32", Doc: "start index into global Synapse array:", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"NSyns", &gti.Field{Name: "NSyns", Type: "uint32", LocalType: "uint32", Doc: "number of synapses in this projection", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RecvCon", &gti.Field{Name: "RecvCon", Type: "[]github.com/emer/axon/axon.StartN", LocalType: "[]StartN", Doc: "starting offset and N cons for each recv neuron, for indexing into the RecvSynIdx array of indexes into the Syns synapses, which are organized sender-based.  This is locally-managed during build process, but also copied to network global PrjnRecvCons slice for GPU usage.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RecvSynIdx", &gti.Field{Name: "RecvSynIdx", Type: "[]uint32", LocalType: "[]uint32", Doc: "index into Syns synaptic state for each sending unit and connection within that, for the sending projection which does not own the synapses, and instead indexes into recv-ordered list", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"RecvConIdx", &gti.Field{Name: "RecvConIdx", Type: "[]uint32", LocalType: "[]uint32", Doc: "for each recv synapse, this is index of *sending* neuron  It is generally preferable to use the Synapse SendIdx where needed, instead of this slice, because then the memory access will be close by other values on the synapse.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SendCon", &gti.Field{Name: "SendCon", Type: "[]github.com/emer/axon/axon.StartN", LocalType: "[]StartN", Doc: "starting offset and N cons for each sending neuron, for indexing into the Syns synapses, which are organized sender-based.  This is locally-managed during build process, but also copied to network global PrjnSendCons slice for GPU usage.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"SendConIdx", &gti.Field{Name: "SendConIdx", Type: "[]uint32", LocalType: "[]uint32", Doc: "index of other neuron that receives the sender's synaptic input, ordered by the sending layer's order of units as the outer loop, and SendCon.N receiving units within that.  It is generally preferable to use the Synapse RecvIdx where needed, instead of this slice, because then the memory access will be close by other values on the synapse.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"GBuf", &gti.Field{Name: "GBuf", Type: "[]int32", LocalType: "[]int32", Doc: "Ge or Gi conductance ring buffer for each neuron, accessed through Params.Com.ReadIdx, WriteIdx -- scale * weight is added with Com delay offset -- a subslice from network PrjnGBuf. Uses int-encoded float values for faster GPU atomic integration", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"GSyns", &gti.Field{Name: "GSyns", Type: "[]float32", LocalType: "[]float32", Doc: "projection-level synaptic conductance values, integrated by prjn before being integrated at the neuron level, which enables the neuron to perform non-linear integration as needed -- a subslice from network PrjnGSyn.", Directives: gti.Directives{}, Tag: "view:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.StartN",
	ShortName: "axon.StartN",
	IDName:    "start-n",
	Doc:       "StartN holds a starting offset index and a number of items\narranged from Start to Start+N (exclusive).\nThis is not 16 byte padded and only for use on CPU side.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"prjnparams"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"prjnparams"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"prjnparams"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Start", &gti.Field{Name: "Start", Type: "uint32", LocalType: "uint32", Doc: "starting offset", Directives: gti.Directives{}, Tag: ""}},
		{"N", &gti.Field{Name: "N", Type: "uint32", LocalType: "uint32", Doc: "number of items --", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.PrjnIdxs",
	ShortName:  "axon.PrjnIdxs",
	IDName:     "prjn-idxs",
	Doc:        "PrjnIdxs contains prjn-level index information into global memory arrays",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"PrjnIdx", &gti.Field{Name: "PrjnIdx", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"RecvLay", &gti.Field{Name: "RecvLay", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"RecvNeurSt", &gti.Field{Name: "RecvNeurSt", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"RecvNeurN", &gti.Field{Name: "RecvNeurN", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"SendLay", &gti.Field{Name: "SendLay", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"SendNeurSt", &gti.Field{Name: "SendNeurSt", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"SendNeurN", &gti.Field{Name: "SendNeurN", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"SynapseSt", &gti.Field{Name: "SynapseSt", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"SendConSt", &gti.Field{Name: "SendConSt", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"RecvConSt", &gti.Field{Name: "RecvConSt", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"RecvSynSt", &gti.Field{Name: "RecvSynSt", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"GBufSt", &gti.Field{Name: "GBufSt", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"GSynSt", &gti.Field{Name: "GSynSt", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.GScaleVals",
	ShortName:  "axon.GScaleVals",
	IDName:     "g-scale-vals",
	Doc:        "GScaleVals holds the conductance scaling values.\nThese are computed once at start and remain constant thereafter,\nand therefore belong on Params and not on PrjnVals.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Scale", &gti.Field{Name: "Scale", Type: "float32", LocalType: "float32", Doc: "scaling factor for integrating synaptic input conductances (G's), originally computed as a function of sending layer activity and number of connections, and typically adapted from there -- see Prjn.PrjnScale adapt params", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Rel", &gti.Field{Name: "Rel", Type: "float32", LocalType: "float32", Doc: "normalized relative proportion of total receiving conductance for this projection: PrjnScale.Rel / sum(PrjnScale.Rel across relevant prjns)", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.PrjnParams",
	ShortName:  "axon.PrjnParams",
	IDName:     "prjn-params",
	Doc:        "PrjnParams contains all of the prjn parameters.\nThese values must remain constant over the course of computation.\nOn the GPU, they are loaded into a uniform.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"PrjnType", &gti.Field{Name: "PrjnType", Type: "github.com/emer/axon/axon.PrjnTypes", LocalType: "PrjnTypes", Doc: "functional type of prjn -- determines functional code path for specialized layer types, and is synchronized with the Prjn.Typ value", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "int32", LocalType: "int32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
		{"Idxs", &gti.Field{Name: "Idxs", Type: "github.com/emer/axon/axon.PrjnIdxs", LocalType: "PrjnIdxs", Doc: "recv and send neuron-level projection index array access info", Directives: gti.Directives{}, Tag: "view:\"-\""}},
		{"Com", &gti.Field{Name: "Com", Type: "github.com/emer/axon/axon.SynComParams", LocalType: "SynComParams", Doc: "synaptic communication parameters: delay, probability of failure", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"PrjnScale", &gti.Field{Name: "PrjnScale", Type: "github.com/emer/axon/axon.PrjnScaleParams", LocalType: "PrjnScaleParams", Doc: "projection scaling parameters for computing GScale: modulates overall strength of projection, using both absolute and relative factors, with adaptation option to maintain target max conductances", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"SWts", &gti.Field{Name: "SWts", Type: "github.com/emer/axon/axon.SWtParams", LocalType: "SWtParams", Doc: "slowly adapting, structural weight value parameters, which control initial weight values and slower outer-loop adjustments", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"Learn", &gti.Field{Name: "Learn", Type: "github.com/emer/axon/axon.LearnSynParams", LocalType: "LearnSynParams", Doc: "synaptic-level learning parameters for learning in the fast LWt values.", Directives: gti.Directives{}, Tag: "view:\"add-fields\""}},
		{"GScale", &gti.Field{Name: "GScale", Type: "github.com/emer/axon/axon.GScaleVals", LocalType: "GScaleVals", Doc: "conductance scaling values", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"RLPred", &gti.Field{Name: "RLPred", Type: "github.com/emer/axon/axon.RLPredPrjnParams", LocalType: "RLPredPrjnParams", Doc: "] Params for RWPrjn and TDPredPrjn for doing dopamine-modulated learning for reward prediction: Da * Send activity. Use in RWPredLayer or TDPredLayer typically to generate reward predictions. If the Da sign is positive, the first recv unit learns fully; for negative, second one learns fully.  Lower lrate applies for opposite cases.  Weights are positive-only.", Directives: gti.Directives{}, Tag: "viewif:\"PrjnType=[RWPrjn,TDPredPrjn]\" view:\"inline\""}},
		{"Matrix", &gti.Field{Name: "Matrix", Type: "github.com/emer/axon/axon.MatrixPrjnParams", LocalType: "MatrixPrjnParams", Doc: "for trace-based learning in the MatrixPrjn. A trace of synaptic co-activity is formed, and then modulated by dopamine whenever it occurs.  This bridges the temporal gap between gating activity and subsequent activity, and is based biologically on synaptic tags. Trace is reset at time of reward based on ACh level from CINs.", Directives: gti.Directives{}, Tag: "viewif:\"PrjnType=MatrixPrjn\" view:\"inline\""}},
		{"BLA", &gti.Field{Name: "BLA", Type: "github.com/emer/axon/axon.BLAPrjnParams", LocalType: "BLAPrjnParams", Doc: "Basolateral Amygdala projection parameters.", Directives: gti.Directives{}, Tag: "viewif:\"PrjnType=BLAPrjn\" view:\"inline\""}},
		{"Hip", &gti.Field{Name: "Hip", Type: "github.com/emer/axon/axon.HipPrjnParams", LocalType: "HipPrjnParams", Doc: "Hip bench parameters.", Directives: gti.Directives{}, Tag: "viewif:\"PrjnType=HipPrjn\" view:\"inline\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.PrjnTypes",
	ShortName: "axon.PrjnTypes",
	IDName:    "prjn-types",
	Doc:       "PrjnTypes is an axon-specific prjn type enum,\nthat encompasses all the different algorithm types supported.\nClass parameter styles automatically key off of these types.\nThe first entries must be kept synchronized with the emer.PrjnType.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"prjntypes"}},
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.DriveParams",
	ShortName:  "axon.DriveParams",
	IDName:     "drive-params",
	Doc:        "DriveParams manages the drive parameters for computing and updating drive state.\nMost of the params are for optional case where drives are automatically\nupdated based on US consumption (which satisfies drives) and time passing\n(which increases drives).",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"DriveMin", &gti.Field{Name: "DriveMin", Type: "float32", LocalType: "float32", Doc: "minimum effective drive value -- this is an automatic baseline ensuring that a positive US results in at least some minimal level of reward.  Unlike Base values, this is not reflected in the activity of the drive values -- applies at the time of reward calculation as a minimum baseline.", Directives: gti.Directives{}, Tag: ""}},
		{"Base", &gti.Field{Name: "Base", Type: "[]float32", LocalType: "[]float32", Doc: "baseline levels for each drive -- what they naturally trend toward in the absence of any input.  Set inactive drives to 0 baseline, active ones typically elevated baseline (0-1 range).", Directives: gti.Directives{}, Tag: ""}},
		{"Tau", &gti.Field{Name: "Tau", Type: "[]float32", LocalType: "[]float32", Doc: "time constants in ThetaCycle (trial) units for natural update toward Base values -- 0 values means no natural update.", Directives: gti.Directives{}, Tag: ""}},
		{"Satisfaction", &gti.Field{Name: "Satisfaction", Type: "[]float32", LocalType: "[]float32", Doc: "decrement in drive value when US is consumed, thus partially satisfying the drive -- positive values are subtracted from current Drive value.", Directives: gti.Directives{}, Tag: ""}},
		{"Dt", &gti.Field{Name: "Dt", Type: "[]float32", LocalType: "[]float32", Doc: "1/Tau", Directives: gti.Directives{}, Tag: "view:\"-\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.UrgencyParams",
	ShortName:  "axon.UrgencyParams",
	IDName:     "urgency-params",
	Doc:        "UrgencyParams has urgency (increasing pressure to do something)\nand parameters for updating it.\nRaw urgency integrates effort when _not_ goal engaged\nwhile effort (negative US 0) integrates when a goal _is_ engaged.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"U50", &gti.Field{Name: "U50", Type: "float32", LocalType: "float32", Doc: "value of raw urgency where the urgency activation level is 50%", Directives: gti.Directives{}, Tag: ""}},
		{"Power", &gti.Field{Name: "Power", Type: "int32", LocalType: "int32", Doc: "exponent on the urge factor -- valid numbers are 1,2,4,6", Directives: gti.Directives{}, Tag: "def:\"4\""}},
		{"Thr", &gti.Field{Name: "Thr", Type: "float32", LocalType: "float32", Doc: "threshold for urge -- cuts off small baseline values", Directives: gti.Directives{}, Tag: "def:\"0.2\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.USParams",
	ShortName:  "axon.USParams",
	IDName:     "us-params",
	Doc:        "USParams control how positive and negative USs are\nweighted and integrated to compute an overall PV primary value.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NegUSOutcomeThr", &gti.Field{Name: "NegUSOutcomeThr", Type: "float32", LocalType: "float32", Doc: "threshold for a negative US increment, _after_ multiplying by the USnegGains factor for that US (to allow for normalized input magnitudes that may translate into different magnitude of effects), to drive a phasic ACh response and associated VSMatrix gating and dopamine firing -- i.e., a full negative US outcome event (global NegUSOutcome flag is set)", Directives: gti.Directives{}, Tag: "def:\"0.5\""}},
		{"PVposGain", &gti.Field{Name: "PVposGain", Type: "float32", LocalType: "float32", Doc: "gain factor applied to sum of weighted, drive-scaled positive USs to compute PVpos primary value summary -- multiplied prior to 1/(1+x) normalization.  Use this to adjust the overall scaling of PVpos reward within 0-1 normalized range (see also PVnegGain).  Each USpos is assumed to be in 0-1 range, default 1.", Directives: gti.Directives{}, Tag: "def:\"2\""}},
		{"PVnegGain", &gti.Field{Name: "PVnegGain", Type: "float32", LocalType: "float32", Doc: "gain factor applied to sum of weighted negative USs to compute PVneg primary value summary -- multiplied prior to 1/(1+x) normalization.  Use this to adjust overall scaling of PVneg within 0-1 normalized range (see also PVposGain).", Directives: gti.Directives{}, Tag: "def:\"1\""}},
		{"USnegGains", &gti.Field{Name: "USnegGains", Type: "[]float32", LocalType: "[]float32", Doc: "gain factor for each individual negative US, multiplied prior to 1/(1+x) normalization of each term for activating the OFCnegUS pools.  These gains are _not_ applied in computing summary PVneg value (see PVnegWts), and generally must be larger than the weights to leverage the dynamic range within each US pool.", Directives: gti.Directives{}, Tag: ""}},
		{"PVposWts", &gti.Field{Name: "PVposWts", Type: "[]float32", LocalType: "[]float32", Doc: "weight factor applied to each separate positive US on the way to computing the overall PVpos summary value, to control the weighting of each US relative to the others. Each pos US is also multiplied by its dynamic Drive factor as well.  Use PVposGain to control the overall scaling of the PVpos value.", Directives: gti.Directives{}, Tag: ""}},
		{"PVnegWts", &gti.Field{Name: "PVnegWts", Type: "[]float32", LocalType: "[]float32", Doc: "weight factor applied to each separate negative US on the way to computing the overall PVneg summary value, to control the weighting of each US relative to the others.  The first pool is Time, second is Effort, and these are typically weighted lower (.02) than salient simulation-specific USs (1).", Directives: gti.Directives{}, Tag: ""}},
		{"USposEst", &gti.Field{Name: "USposEst", Type: "[]float32", LocalType: "[]float32", Doc: "computed estimated US values, based on OFCposUSPT and VSMatrix gating, in PVposEst", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.LHbParams",
	ShortName:  "axon.LHbParams",
	IDName:     "l-hb-params",
	Doc:        "LHbParams has values for computing LHb & RMTg which drives dips / pauses in DA firing.\nLHb handles all US-related (PV = primary value) processing.\nPositive net LHb activity drives dips / pauses in VTA DA activity,\ne.g., when predicted pos > actual or actual neg > predicted.\nNegative net LHb activity drives bursts in VTA DA activity,\ne.g., when actual pos > predicted (redundant with LV / Amygdala)\nor \"relief\" burst when actual neg < predicted.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NegThr", &gti.Field{Name: "NegThr", Type: "float32", LocalType: "float32", Doc: "threshold factor that multiplies integrated pvNeg value to establish a threshold for whether the integrated pvPos value is good enough to drive overall net positive reward", Directives: gti.Directives{}, Tag: "def:\"1\""}},
		{"BurstGain", &gti.Field{Name: "BurstGain", Type: "float32", LocalType: "float32", Doc: "gain multiplier on PVpos for purposes of generating bursts (not for  discounting negative dips) -- 4 renormalizes for typical ~.5 values (.5 * .5 = .25)", Directives: gti.Directives{}, Tag: "def:\"1\""}},
		{"DipGain", &gti.Field{Name: "DipGain", Type: "float32", LocalType: "float32", Doc: "gain multiplier on PVneg for purposes of generating dips (not for  discounting positive bursts) -- 4 renormalizes for typical ~.5 values (.5 * .5 = .25)", Directives: gti.Directives{}, Tag: "def:\"1\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.GiveUpParams",
	ShortName:  "axon.GiveUpParams",
	IDName:     "give-up-params",
	Doc:        "GiveUpParams are parameters for computing when to give up",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NegThr", &gti.Field{Name: "NegThr", Type: "float32", LocalType: "float32", Doc: "threshold factor that multiplies integrated pvNeg value to establish a threshold for whether the integrated pvPos value is good enough to drive overall net positive reward", Directives: gti.Directives{}, Tag: "def:\"1\""}},
		{"Gain", &gti.Field{Name: "Gain", Type: "float32", LocalType: "float32", Doc: "multiplier on pos - neg for logistic probability function -- higher gain values produce more binary give up behavior and lower values produce more graded stochastic behavior around the threshold", Directives: gti.Directives{}, Tag: "def:\"10\""}},
		{"MinPVposEst", &gti.Field{Name: "MinPVposEst", Type: "float32", LocalType: "float32", Doc: "minimum estimated PVpos value -- deals with any errors in the estimation process to make sure that erroneous GiveUp doesn't happen.", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.PVLV",
	ShortName:  "axon.PVLV",
	IDName:     "pvlv",
	Doc:        "PVLV represents the core brainstem-level (hypothalamus) bodily drives\nand resulting dopamine from US (unconditioned stimulus) inputs,\nas computed by the PVLV model of primary value (PV)\nand learned value (LV), describing the functions of the Amygala,\nVentral Striatum, VTA and associated midbrain nuclei (LDT, LHb, RMTg).\nCore LHb (lateral habenula) and VTA (ventral tegmental area) dopamine\nare computed in equations using inputs from specialized network layers\n(LDTLayer driven by BLA, CeM layers, VSPatchLayer).\nThe Drives, Effort, US and resulting LHb PV dopamine computation all happens at the\nat the start of each trial (NewState, Step).  The LV / CS dopamine is computed\ncycle-by-cycle by the VTA layer using parameters set by the VTA layer.\nRenders USLayer, PVLayer, DrivesLayer representations based on state updated here.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NPosUSs", &gti.Field{Name: "NPosUSs", Type: "uint32", LocalType: "uint32", Doc: "number of possible positive US states and corresponding drives -- the first is always reserved for novelty / curiosity.  Must be set programmatically via SetNUSs method, which allocates corresponding parameters.", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"NNegUSs", &gti.Field{Name: "NNegUSs", Type: "uint32", LocalType: "uint32", Doc: "number of possible negative US states -- is reserved for accumulated time, the accumulated effort cost.  Must be set programmatically via SetNUSs method, which allocates corresponding parameters.", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"Drive", &gti.Field{Name: "Drive", Type: "github.com/emer/axon/axon.DriveParams", LocalType: "DriveParams", Doc: "parameters and state for built-in drives that form the core motivations of agent, controlled by lateral hypothalamus and associated body state monitoring such as glucose levels and thirst.", Directives: gti.Directives{}, Tag: ""}},
		{"Urgency", &gti.Field{Name: "Urgency", Type: "github.com/emer/axon/axon.UrgencyParams", LocalType: "UrgencyParams", Doc: "urgency (increasing pressure to do something) and parameters for updating it. Raw urgency is incremented by same units as effort, but is only reset with a positive US.", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"USs", &gti.Field{Name: "USs", Type: "github.com/emer/axon/axon.USParams", LocalType: "USParams", Doc: "controls how positive and negative USs are weighted and integrated to compute an overall PV primary value.", Directives: gti.Directives{}, Tag: ""}},
		{"LHb", &gti.Field{Name: "LHb", Type: "github.com/emer/axon/axon.LHbParams", LocalType: "LHbParams", Doc: "lateral habenula (LHb) parameters and state, which drives dipping / pausing in dopamine when the predicted positive outcome > actual, or actual negative outcome > predicted.  Can also drive bursting for the converse, and via matrix phasic firing", Directives: gti.Directives{}, Tag: "view:\"inline\""}},
		{"GiveUp", &gti.Field{Name: "GiveUp", Type: "github.com/emer/axon/axon.GiveUpParams", LocalType: "GiveUpParams", Doc: "parameters for giving up based on PV pos - neg difference", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.LDTParams",
	ShortName: "axon.LDTParams",
	IDName:    "ldt-params",
	Doc:       "LDTParams compute reward salience as ACh global neuromodulatory signal\nas a function of the MAX activation of its inputs.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"pvlv_layers"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"SrcThr", &gti.Field{Name: "SrcThr", Type: "float32", LocalType: "float32", Doc: "threshold per input source, on absolute value (magnitude), to count as a significant reward event, which then drives maximal ACh -- set to 0 to disable this nonlinear behavior", Directives: gti.Directives{}, Tag: "def:\"0.05\""}},
		{"Rew", &gti.Field{Name: "Rew", Type: "goki.dev/gosl/v2/slbool.Bool", LocalType: "slbool.Bool", Doc: "use the global Context.NeuroMod.HasRew flag -- if there is some kind of external reward being given, then ACh goes to 1, else 0 for this component", Directives: gti.Directives{}, Tag: "def:\"true\""}},
		{"MaintInhib", &gti.Field{Name: "MaintInhib", Type: "float32", LocalType: "float32", Doc: "extent to which active maintenance (via Context.NeuroMod.NotMaint PTNotMaintLayer activity) inhibits ACh signals -- when goal engaged, distractability is lower.", Directives: gti.Directives{}, Tag: "def:\"2\""}},
		{"NotMaintMax", &gti.Field{Name: "NotMaintMax", Type: "float32", LocalType: "float32", Doc: "maximum NeuroMod.NotMaint activity for computing Maint as 1-NotMaint -- when NotMaint is >= NotMaintMax, then Maint = 0.", Directives: gti.Directives{}, Tag: "def:\"0.4\""}},
		{"SrcLay1Idx", &gti.Field{Name: "SrcLay1Idx", Type: "int32", LocalType: "int32", Doc: "idx of Layer to get max activity from -- set during Build from BuildConfig SrcLay1Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"SrcLay2Idx", &gti.Field{Name: "SrcLay2Idx", Type: "int32", LocalType: "int32", Doc: "idx of Layer to get max activity from -- set during Build from BuildConfig SrcLay2Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"SrcLay3Idx", &gti.Field{Name: "SrcLay3Idx", Type: "int32", LocalType: "int32", Doc: "idx of Layer to get max activity from -- set during Build from BuildConfig SrcLay3Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"SrcLay4Idx", &gti.Field{Name: "SrcLay4Idx", Type: "int32", LocalType: "int32", Doc: "idx of Layer to get max activity from -- set during Build from BuildConfig SrcLay4Name if present -- -1 if not used", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.VSPatchParams",
	ShortName:  "axon.VSPatchParams",
	IDName:     "vs-patch-params",
	Doc:        "VSPatchParams parameters for VSPatch learning",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Gain", &gti.Field{Name: "Gain", Type: "float32", LocalType: "float32", Doc: "multiplier applied after Thr threshold", Directives: gti.Directives{}, Tag: "def:\"3\""}},
		{"ThrInit", &gti.Field{Name: "ThrInit", Type: "float32", LocalType: "float32", Doc: "initial value for overall threshold, which adapts over time -- stored in LayerVals.ActAvgVals.AdaptThr", Directives: gti.Directives{}, Tag: "def:\"0.15\""}},
		{"ThrLRate", &gti.Field{Name: "ThrLRate", Type: "float32", LocalType: "float32", Doc: "learning rate for the threshold -- moves in proportion to same predictive error signal that drives synaptic learning", Directives: gti.Directives{}, Tag: "def:\"0,0.002\""}},
		{"ThrNonRew", &gti.Field{Name: "ThrNonRew", Type: "float32", LocalType: "float32", Doc: "extra gain factor for non-reward trials, which is the most critical", Directives: gti.Directives{}, Tag: "def:\"10\""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.VTAParams",
	ShortName:  "axon.VTAParams",
	IDName:     "vta-params",
	Doc:        "VTAParams are for computing overall VTA DA based on LHb PVDA\n(primary value -- at US time, computed at start of each trial\nand stored in LHbPVDA global value)\nand Amygdala (CeM) CS / learned value (LV) activations, which update\nevery cycle.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"CeMGain", &gti.Field{Name: "CeMGain", Type: "float32", LocalType: "float32", Doc: "gain on CeM activity difference (CeMPos - CeMNeg) for generating LV CS-driven dopamine values", Directives: gti.Directives{}, Tag: "def:\"0.75\""}},
		{"LHbGain", &gti.Field{Name: "LHbGain", Type: "float32", LocalType: "float32", Doc: "gain on computed LHb DA (Burst - Dip) -- for controlling DA levels", Directives: gti.Directives{}, Tag: "def:\"1.25\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.BLAPrjnParams",
	ShortName: "axon.BLAPrjnParams",
	IDName:    "bla-prjn-params",
	Doc:       "BLAPrjnParams has parameters for basolateral amygdala learning.\nLearning is driven by the Tr trace as function of ACh * Send Act\nrecorded prior to US, and at US, recv unit delta: CaSpkP - SpkPrv\ntimes normalized GeIntNorm for recv unit credit assignment.\nThe Learn.Trace.Tau time constant determines trace updating over trials\nwhen ACh is above threshold -- this determines strength of second-order\nconditioning -- default of 1 means none, but can be increased as needed.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"pvlv_prjns"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"NegDeltaLRate", &gti.Field{Name: "NegDeltaLRate", Type: "float32", LocalType: "float32", Doc: "use 0.01 for acquisition (don't unlearn) and 1 for extinction -- negative delta learning rate multiplier", Directives: gti.Directives{}, Tag: "def:\"0.01,1\""}},
		{"AChThr", &gti.Field{Name: "AChThr", Type: "float32", LocalType: "float32", Doc: "threshold on this layer's ACh level for trace learning updates", Directives: gti.Directives{}, Tag: "def:\"0.1\""}},
		{"USTrace", &gti.Field{Name: "USTrace", Type: "float32", LocalType: "float32", Doc: "proportion of US time stimulus activity to use for the trace component of", Directives: gti.Directives{}, Tag: "def:\"0,0.5\""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.RandFunIdx",
	ShortName: "axon.RandFunIdx",
	IDName:    "rand-fun-idx",
	Doc:       "",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"axonrand"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"axonrand"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"axonrand"}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.RWPredParams",
	ShortName: "axon.RWPredParams",
	IDName:    "rw-pred-params",
	Doc:       "RWPredParams parameterizes reward prediction for a simple Rescorla-Wagner\nlearning dynamic (i.e., PV learning in the PVLV framework).",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"rl_layers"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"PredRange", &gti.Field{Name: "PredRange", Type: "goki.dev/etable/v2/minmax.F32", LocalType: "minmax.F32", Doc: "default 0.1..0.99 range of predictions that can be represented -- having a truncated range preserves some sensitivity in dopamine at the extremes of good or poor performance", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.RWDaParams",
	ShortName:  "axon.RWDaParams",
	IDName:     "rw-da-params",
	Doc:        "RWDaParams computes a dopamine (DA) signal using simple Rescorla-Wagner\nlearning dynamic (i.e., PV learning in the PVLV framework).",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"TonicGe", &gti.Field{Name: "TonicGe", Type: "float32", LocalType: "float32", Doc: "tonic baseline Ge level for DA = 0 -- +/- are between 0 and 2*TonicGe -- just for spiking display of computed DA value", Directives: gti.Directives{}, Tag: ""}},
		{"RWPredLayIdx", &gti.Field{Name: "RWPredLayIdx", Type: "int32", LocalType: "int32", Doc: "idx of RWPredLayer to get reward prediction from -- set during Build from BuildConfig RWPredLayName", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.TDIntegParams",
	ShortName:  "axon.TDIntegParams",
	IDName:     "td-integ-params",
	Doc:        "TDIntegParams are params for reward integrator layer",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Discount", &gti.Field{Name: "Discount", Type: "float32", LocalType: "float32", Doc: "discount factor -- how much to discount the future prediction from TDPred", Directives: gti.Directives{}, Tag: ""}},
		{"PredGain", &gti.Field{Name: "PredGain", Type: "float32", LocalType: "float32", Doc: "gain factor on TD rew pred activations", Directives: gti.Directives{}, Tag: ""}},
		{"TDPredLayIdx", &gti.Field{Name: "TDPredLayIdx", Type: "int32", LocalType: "int32", Doc: "idx of TDPredLayer to get reward prediction from -- set during Build from BuildConfig TDPredLayName", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.TDDaParams",
	ShortName:  "axon.TDDaParams",
	IDName:     "td-da-params",
	Doc:        "TDDaParams are params for dopamine (DA) signal as the temporal difference (TD)\nbetween the TDIntegLayer activations in the minus and plus phase.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"TonicGe", &gti.Field{Name: "TonicGe", Type: "float32", LocalType: "float32", Doc: "tonic baseline Ge level for DA = 0 -- +/- are between 0 and 2*TonicGe -- just for spiking display of computed DA value", Directives: gti.Directives{}, Tag: ""}},
		{"TDIntegLayIdx", &gti.Field{Name: "TDIntegLayIdx", Type: "int32", LocalType: "int32", Doc: "idx of TDIntegLayer to get reward prediction from -- set during Build from BuildConfig TDIntegLayName", Directives: gti.Directives{}, Tag: "inactive:\"+\""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.RLPredPrjnParams",
	ShortName: "axon.RLPredPrjnParams",
	IDName:    "rl-pred-prjn-params",
	Doc:       "RLPredPrjnParams does dopamine-modulated learning for reward prediction: Da * Send.Act\nUsed by RWPrjn and TDPredPrjn within corresponding RWPredLayer or TDPredLayer\nto generate reward predictions based on its incoming weights, using linear activation\nfunction. Has no weight bounds or limits on sign etc.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"rl_prjns"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"OppSignLRate", &gti.Field{Name: "OppSignLRate", Type: "float32", LocalType: "float32", Doc: "how much to learn on opposite DA sign coding neuron (0..1)", Directives: gti.Directives{}, Tag: ""}},
		{"DaTol", &gti.Field{Name: "DaTol", Type: "float32", LocalType: "float32", Doc: "tolerance on DA -- if below this abs value, then DA goes to zero and there is no learning -- prevents prediction from exactly learning to cancel out reward value, retaining a residual valence of signal", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "float32", LocalType: "float32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.SynapseVars",
	ShortName: "axon.SynapseVars",
	IDName:    "synapse-vars",
	Doc:       "SynapseVars are the neuron variables representing current synaptic state,\nspecifically weights.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"synapse"}},
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.SynapseCaVars",
	ShortName: "axon.SynapseCaVars",
	IDName:    "synapse-ca-vars",
	Doc:       "SynapseCaVars are synapse variables for calcium involved in learning,\nwhich are data parallel input specific.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.SynapseIdxs",
	ShortName: "axon.SynapseIdxs",
	IDName:    "synapse-idxs",
	Doc:       "SynapseIdxs are the neuron indexes and other uint32 values (flags, etc).\nThere is only one of these per neuron -- not data parallel.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "enums", Directive: "enum", Args: []string{}},
	},

	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:      "github.com/emer/axon/axon.SynapseVarStrides",
	ShortName: "axon.SynapseVarStrides",
	IDName:    "synapse-var-strides",
	Doc:       "SynapseVarStrides encodes the stride offsets for synapse variable access\ninto network float32 array.",
	Directives: gti.Directives{
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"synapse"}},
		&gti.Directive{Tool: "gosl", Directive: "hlsl", Args: []string{"synapse"}},
		&gti.Directive{Tool: "gosl", Directive: "end", Args: []string{"synapse"}},
		&gti.Directive{Tool: "gosl", Directive: "start", Args: []string{"synapse"}},
	},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Synapse", &gti.Field{Name: "Synapse", Type: "uint32", LocalType: "uint32", Doc: "synapse level", Directives: gti.Directives{}, Tag: ""}},
		{"Var", &gti.Field{Name: "Var", Type: "uint32", LocalType: "uint32", Doc: "variable level", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.SynapseCaStrides",
	ShortName:  "axon.SynapseCaStrides",
	IDName:     "synapse-ca-strides",
	Doc:        "SynapseCaStrides encodes the stride offsets for synapse variable access\ninto network float32 array.  Data is always the inner-most variable.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Synapse", &gti.Field{Name: "Synapse", Type: "uint64", LocalType: "uint64", Doc: "synapse level", Directives: gti.Directives{}, Tag: ""}},
		{"Var", &gti.Field{Name: "Var", Type: "uint64", LocalType: "uint64", Doc: "variable level", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})

var _ = gti.AddType(&gti.Type{
	Name:       "github.com/emer/axon/axon.SynapseIdxStrides",
	ShortName:  "axon.SynapseIdxStrides",
	IDName:     "synapse-idx-strides",
	Doc:        "SynapseIdxStrides encodes the stride offsets for synapse index access\ninto network uint32 array.",
	Directives: gti.Directives{},
	Fields: ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{
		{"Synapse", &gti.Field{Name: "Synapse", Type: "uint32", LocalType: "uint32", Doc: "synapse level", Directives: gti.Directives{}, Tag: ""}},
		{"Index", &gti.Field{Name: "Index", Type: "uint32", LocalType: "uint32", Doc: "index value level", Directives: gti.Directives{}, Tag: ""}},
		{"pad", &gti.Field{Name: "pad", Type: "uint32", LocalType: "uint32", Doc: "", Directives: gti.Directives{}, Tag: ""}},
	}),
	Embeds:  ordmap.Make([]ordmap.KeyVal[string, *gti.Field]{}),
	Methods: ordmap.Make([]ordmap.KeyVal[string, *gti.Method]{}),
})
