// Code generated by "stringer -type=GlobalVars"; DO NOT EDIT.

package axon

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[GvRew-0]
	_ = x[GvHasRew-1]
	_ = x[GvRewPred-2]
	_ = x[GvPrevPred-3]
	_ = x[GvDA-4]
	_ = x[GvACh-5]
	_ = x[GvNE-6]
	_ = x[GvSer-7]
	_ = x[GvAChRaw-8]
	_ = x[GvNotMaint-9]
	_ = x[GvEffortRaw-10]
	_ = x[GvEffortDisc-11]
	_ = x[GvEffortCurMax-12]
	_ = x[GvUrgency-13]
	_ = x[GvUrgencyRaw-14]
	_ = x[GvVSMatrixJustGated-15]
	_ = x[GvVSMatrixHasGated-16]
	_ = x[GvHasRewPrev-17]
	_ = x[GvHasPosUSPrev-18]
	_ = x[GvHasPosUS-19]
	_ = x[GvLHbDip-20]
	_ = x[GvLHbBurst-21]
	_ = x[GvLHbDipSumCur-22]
	_ = x[GvLHbDipSum-23]
	_ = x[GvLHbGiveUp-24]
	_ = x[GvLHbPos-25]
	_ = x[GvLHbNeg-26]
	_ = x[GvVtaDA-27]
	_ = x[GvVtaUSpos-28]
	_ = x[GvVtaPVpos-29]
	_ = x[GvVtaPVneg-30]
	_ = x[GvVtaCeMpos-31]
	_ = x[GvVtaCeMneg-32]
	_ = x[GvVtaLHbDip-33]
	_ = x[GvVtaLHbBurst-34]
	_ = x[GvVtaVSPatchPos-35]
	_ = x[GvUSneg-36]
	_ = x[GvDrives-37]
	_ = x[GvBaseDrives-38]
	_ = x[GvDrivesTau-39]
	_ = x[GvDrivesUSDec-40]
	_ = x[GvUSpos-41]
	_ = x[GvVSPatch-42]
	_ = x[GlobalVarsN-43]
}

const _GlobalVars_name = "GvRewGvHasRewGvRewPredGvPrevPredGvDAGvAChGvNEGvSerGvAChRawGvNotMaintGvEffortRawGvEffortDiscGvEffortCurMaxGvUrgencyGvUrgencyRawGvVSMatrixJustGatedGvVSMatrixHasGatedGvHasRewPrevGvHasPosUSPrevGvHasPosUSGvLHbDipGvLHbBurstGvLHbDipSumCurGvLHbDipSumGvLHbGiveUpGvLHbPosGvLHbNegGvVtaDAGvVtaUSposGvVtaPVposGvVtaPVnegGvVtaCeMposGvVtaCeMnegGvVtaLHbDipGvVtaLHbBurstGvVtaVSPatchPosGvUSnegGvDrivesGvBaseDrivesGvDrivesTauGvDrivesUSDecGvUSposGvVSPatchGlobalVarsN"

var _GlobalVars_index = [...]uint16{0, 5, 13, 22, 32, 36, 41, 45, 50, 58, 68, 79, 91, 105, 114, 126, 145, 163, 175, 189, 199, 207, 217, 231, 242, 253, 261, 269, 276, 286, 296, 306, 317, 328, 339, 352, 367, 374, 382, 394, 405, 418, 425, 434, 445}

func (i GlobalVars) String() string {
	if i < 0 || i >= GlobalVars(len(_GlobalVars_index)-1) {
		return "GlobalVars(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _GlobalVars_name[_GlobalVars_index[i]:_GlobalVars_index[i+1]]
}

func (i *GlobalVars) FromString(s string) error {
	for j := 0; j < len(_GlobalVars_index)-1; j++ {
		if s == _GlobalVars_name[_GlobalVars_index[j]:_GlobalVars_index[j+1]] {
			*i = GlobalVars(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: GlobalVars")
}
