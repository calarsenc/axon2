// Code generated by "stringer -type=NeuronIdxs"; DO NOT EDIT.

package axon

import (
	"errors"
	"strconv"
)

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NrnNeurIdx-0]
	_ = x[NrnLayIdx-1]
	_ = x[NrnSubPool-2]
	_ = x[NeuronIdxsN-3]
}

const _NeuronIdxs_name = "NrnNeurIdxNrnLayIdxNrnSubPoolNeuronIdxsN"

var _NeuronIdxs_index = [...]uint8{0, 10, 19, 29, 40}

func (i NeuronIdxs) String() string {
	if i < 0 || i >= NeuronIdxs(len(_NeuronIdxs_index)-1) {
		return "NeuronIdxs(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _NeuronIdxs_name[_NeuronIdxs_index[i]:_NeuronIdxs_index[i+1]]
}

func (i *NeuronIdxs) FromString(s string) error {
	for j := 0; j < len(_NeuronIdxs_index)-1; j++ {
		if s == _NeuronIdxs_name[_NeuronIdxs_index[j]:_NeuronIdxs_index[j+1]] {
			*i = NeuronIdxs(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: NeuronIdxs")
}

var _NeuronIdxs_descMap = map[NeuronIdxs]string{
	0: `NrnNeurIdx is the index of this neuron within its owning layer`,
	1: `NrnLayIdx is the index of the layer that this neuron belongs to, needed for neuron-level parallel code.`,
	2: `NrnSubPool is the index of the sub-level inhibitory pool for this neuron (only for 4D shapes, the pool (unit-group / hypercolumn) structure level). Indicies start at 1 -- 0 is layer-level pool (is 0 if no sub-pools).`,
	3: ``,
}

func (i NeuronIdxs) Desc() string {
	if str, ok := _NeuronIdxs_descMap[i]; ok {
		return str
	}
	return "NeuronIdxs(" + strconv.FormatInt(int64(i), 10) + ")"
}
